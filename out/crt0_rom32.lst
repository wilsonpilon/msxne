ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 1
Hexadecimal [32-Bits]



                                      1 ; ____________________________
                                      2 ; ██▀███▀██▀▀▀▀▀▀▀█▀▀█        │   ▄▄       ▄▄   ▄▄
                                      3 ; ██  ▀  █▄  ▀██▄ ▀ ▄█ ▄▀▀ █  │  ██ ▀ ██▄▀ ██▀ █ ██
                                      4 ; █  █ █  ▀▀  ▄█  █  █ ▀▄█ █▄ │  ▀█▄▀ ██   ▀█▄ ▀▄█▀
                                      5 ; ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀────────┘
                                      6 ;  by Guillaume 'Aoineko' Blanchard under CC-BY-AS license
                                      7 ;──────────────────────────────────────────────────────────────────────────────
                                      8 ; crt0 header for 32KB ROM program
                                      9 ;──────────────────────────────────────────────────────────────────────────────
                                     10 ; Code address: 0x4000
                                     11 ; Data address: 0xC000
                                     12 ;──────────────────────────────────────────────────────────────────────────────
                                     13 .module	crt0
                                     14 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 2
Hexadecimal [32-Bits]



                                     15 .include "defines.asm"
                                      1 ; ____________________________
                                      2 ; ██▀███▀██▀▀▀▀▀▀▀█▀▀█        │   ▄▄       ▄▄   ▄▄
                                      3 ; ██  ▀  █▄  ▀██▄ ▀ ▄█ ▄▀▀ █  │  ██ ▀ ██▄▀ ██▀ █ ██
                                      4 ; █  █ █  ▀▀  ▄█  █  █ ▀▄█ █▄ │  ▀█▄▀ ██   ▀█▄ ▀▄█▀
                                      5 ; ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀────────┘
                                      6 ;  by Guillaume 'Aoineko' Blanchard under CC-BY-AS license
                                      7 ;──────────────────────────────────────────────────────────────────────────────
                                      8 ; crt0 helper defines
                                      9 ;------------------------------------------------------------------------------
                                     10 ; By Guillaume 'Aoineko' Blanchard for MSX Game Library 
                                     11 ; (ɔ) 2022 under CC-BY-AS license
                                     12 ;------------------------------------------------------------------------------
                                     13 .module	crt0
                                     14 
                                     15 ;------------------------------------------------------------------------------
                                     16 ; Global symbols
                                     17 .globl _main
                                     18 .globl l__INITIALIZER
                                     19 .globl s__INITIALIZED
                                     20 .globl s__INITIALIZER
                                     21 .globl s__HEADER
                                     22 .globl s__GSFINAL
                                     23 .globl s__HEAP
                                     24 
                                     25 ;------------------------------------------------------------------------------
                                     26 ; I/O ports
                         000000A8    27 PPI_A			= #0xA8
                         000000A9    28 PPI_B			= #0xA9
                         000000AA    29 PPI_C			= #0xAA
                         000000AB    30 PPI_MODE		= #0xAB
                         00000099    31 VDP_S			= #0x99
                         00000099    32 VDP_A			= #0x99
                         00000066    33 V9_P06			= #0x66
                                     34 
                                     35 ;------------------------------------------------------------------------------
                                     36 ; Main-ROM routines
                         00000024    37 ENASLT			= #0x0024
                         0000002B    38 ROMVER			= #0x002B
                         0000002D    39 MSXVER			= #0x002D
                         00000138    40 RSLREG			= #0x0138
                                     41 
                                     42 ;------------------------------------------------------------------------------
                                     43 ; RAM work area variables
                         0000FC4A    44 HIMEM			= #0xFC4A
                         0000FCC1    45 EXPTBL			= #0xFCC1
                         0000FEDA    46 H_STKE			= #0xFEDA
                         0000FFFF    47 SLTSL			= #0xFFFF
                                     48 
                                     49 ;------------------------------------------------------------------------------
                                     50 ; Row #7 keys
                         00000001    51 KEY_F4			= #0b00000001
                         00000002    52 KEY_F5			= #0b00000010
                         00000004    53 KEY_ESC			= #0b00000100
                         00000008    54 KEY_TAB			= #0b00001000
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 3
Hexadecimal [32-Bits]



                         00000010    55 KEY_STOP		= #0b00010000
                         00000020    56 KEY_BS			= #0b00100000
                         00000040    57 KEY_SELECT		= #0b01000000
                         00000080    58 KEY_RETURN		= #0b10000000
                                     59 
                                     60 ;------------------------------------------------------------------------------
                                     61 ; ROM types
                         00000000    62 ROM_PLAIN		= 0		; Plain ROM (no mapper)
                         00000002    63 ROM_MAPPER_8K	= 2		; Mapper 8 KB
                         00000002    64 ROM_ASCII8		= 2		;  ASCII-8 mapper
                         00000003    65 ROM_KONAMI		= 3		;  Konami without SCC mapper
                         00000004    66 ROM_KONAMI_SCC	= 4		;  Konami with SCC mapper
                         00000005    67 ROM_NEO8		= 5		;  NEO-8 mapper
                         00000006    68 ROM_YAMANOOTO	= 6		;  Yamanooto mapper
                         0000000A    69 ROM_MAPPER_16K	= 10	; Mapper 16 KB
                         0000000A    70 ROM_ASCII16		= 10	;  ASCII-16 mmaper
                         0000000B    71 ROM_NEO16		= 11	;  NEO-16 mapper
                         0000000C    72 ROM_ASCII16X	= 12	;  ASCII16-X mmaper
                                     73 
                                     74 ;------------------------------------------------------------------------------
                                     75 ; Yamanooto registers types
                         00007FFF    76 YAMA_ENAR		= #0x7FFF		; Features enable register
                         00000001    77 YAMA_ENAR_REGEN	= #0b00000001	; Registers enable. Setting this bit allows writing to all other registers and all register readability.
                         00000010    78 YAMA_ENAR_WREN	= #0b00010000	; Write enable. Set to 1 to enable writes to flash rom.
                         00007FFE    79 YAMA_OFFR		= #0x7FFE		; Mapper offset register
                         00007FFD    80 YAMA_CFGR		= #0x7FFD		; Configuration and control register
                         00000001    81 YAMA_CFGR_MDIS	= #0b00000001	; This bit disables mapping so you avoid mapper changes with small (up to 32 kbyte) roms that poke the switching area. Usually this is a problem only in K4 mode. Remember to reset this bit to make changes again.
                         00000002    82 YAMA_CFGR_ECHO	= #0b00000010	; This bit allows the built-in PSG to respond to the port number of the internal PSG of the MSX, causing music intended for the internal PSG to be played too in the Yamanooto and be heard through the stereo output of the cartridge. This is set only during boot when you press the HOME key.
                         00000004    83 YAMA_CFGR_ROMDIS= #0b00000100	; Setting this bit disables access to flash rom. This is automatically set during boot when the DEL key is pressed. You need to clear this bit in software to be able read/write the flash rom.
                         00000008    84 YAMA_CFGR_K4	= #0b00001000	; Changes mapper configuration from Konami5 (SCC) to Konami4 for compatibility with game compilations including non-SCC games.
                                     85 
                                     86 ;------------------------------------------------------------------------------
                                     87 ; ISR types
                         00000000    88 ISR_NONE		= 0				; No ISR
                         00000001    89 ISR_ALL			= 1				; Handle any interruption
                         00000002    90 ISR_VBLANK		= 2				; V-blank handler (V9938 or V9958)
                         00000003    91 ISR_VHBLANK		= 3				; V-blank and h-blank handler (V9958)
                         00000004    92 ISR_V9990		= 4				; V-blank, h-blank and command end handler (V9990)
                                     93 
                                     94 ;------------------------------------------------------------------------------
                                     95 ; Installation in RAM's page 0
                         00000000    96 RAM0_NONE		= 0				; Don't install anything in RAM 
                         00000001    97 RAM0_ISR		= 1				; Install only ISR
                         00000002    98 RAM0_SEGMENT	= 2				; Install ISR and segment data (for mapped-ROM)
                                     99 
                                    100 ;------------------------------------------------------------------------------
                                    101 ; Default values
                         00004000   102 START_ADDR		= 0x4000		; Program start address
                         00000000   103 ROM_MAPPER		= ROM_PLAIN		; ROM type
                         00000000   104 ROM_SKIP		= 0				; Skip boot with a key press
                         00000004   105 ROM_SKIP_KEY	= KEY_ESC		; Skip key to check
                         00000000   106 ROM_DELAY		= 0				; Install BDOS
                         00000000   107 ROM_BCALL		= 0				; Add banked call trampoline
                         00000002   108 ROM_ISR			= ISR_VBLANK	; ISR type
                         00000000   109 ROM_RAMISR		= RAM0_NONE		; Install ISR in RAM's page 0
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 4
Hexadecimal [32-Bits]



                         00000000   110 ISR_SET_S0		= 0				; Reset statut register to S#0 in ISR
                         00000000   111 APP_SIGN		= 0				; Add application signature
                         00004C47   112 APP_SIGN_NAME	= "GL"			; Application creator/group/company name
                         00000000   113 APP_SIGN_ID		= 0x0000		; Application number
                         00000000   114 DOS_PARSEARG	= 0				; Parse MSX-DOS command-line arguments
                         00000000   115 DOS_ISR			= 0				; Install ISR for MSX-DOS
                                    116 
                                    117 ;------------------------------------------------------------------------------
                                    118 ; Project overwrite values; File generated by the build tool
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 5
Hexadecimal [32-Bits]



                                    119 .include "crt0_config.asm"
                                      1 ; MSXgl | Crt0 config file generated by the Build tool
                         00004000     2 ADDR_BOOT=0x4000
                         00000001     3 DOS_PARSEARG=1
                         00000001     4 APP_SIGN=1
                         00004C47     5 APP_SIGN_NAME="GL"
                         00003154     6 APP_SIGN_ID="T1"
                                      7 .macro ROM_SIGN_MACRO
                                      8 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 6
Hexadecimal [32-Bits]



                                     16 .include "macros.asm"
                                      1 ; ____________________________
                                      2 ; ██▀███▀██▀▀▀▀▀▀▀█▀▀█        │   ▄▄       ▄▄   ▄▄
                                      3 ; ██  ▀  █▄  ▀██▄ ▀ ▄█ ▄▀▀ █  │  ██ ▀ ██▄▀ ██▀ █ ██
                                      4 ; █  █ █  ▀▀  ▄█  █  █ ▀▄█ █▄ │  ▀█▄▀ ██   ▀█▄ ▀▄█▀
                                      5 ; ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀────────┘
                                      6 ;  by Guillaume 'Aoineko' Blanchard under CC-BY-AS license
                                      7 ;──────────────────────────────────────────────────────────────────────────────
                                      8 .module	crt0
                                      9 
                                     10 ;==============================================================================
                                     11 ; HEADER
                                     12 ;==============================================================================
                                     13 
                                     14 ;------------------------------------------------------------------------------
                                     15 ; ROM Header
                                     16 ;------------------------------------------------------------------------------
                                     17 .macro ROM_HEADER startAddr
                                     18 
                                     19 	crt0_rom_header::
                                     20 		.ascii	"AB"
                                     21 		.dw		startAddr
                                     22 		.dw		0x0000
                                     23 		.dw		0x0000
                                     24 		.dw		0x0000
                                     25 		.dw		0x0000
                                     26 		.dw		0x0000
                                     27 		.dw		0x0000
                                     28 
                                     29 		ROM_SIGN_MACRO ; empty if AddROMSignature build option is set to false
                                     30 
                                     31 	.if APP_SIGN
                                     32 	_g_AppSignature::
                                     33 		.dw		APP_SIGN_NAME
                                     34 		.dw		APP_SIGN_ID
                                     35 	.endif
                                     36 	; .ifdef APP_SIGN_EXTRA
                                     37 		; .db		APP_SIGN_EXTRA
                                     38 	; .endif
                                     39 
                                     40 .endm
                                     41 
                                     42 ;------------------------------------------------------------------------------
                                     43 ; Basic Header
                                     44 ;------------------------------------------------------------------------------
                                     45 .macro BASIC_HEADER endAddr
                                     46 
                                     47 	crt0_basic_header::
                                     48 		.db 	0xFE				; ID byte
                                     49 		.dw 	crt0_basic_start	; Start address
                                     50 		.dw		crt0_end			; End address
                                     51 		.dw 	crt0_basic_exec		; Execution address
                                     52 
                                     53 	crt0_basic_start:
                                     54 	.if APP_SIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 7
Hexadecimal [32-Bits]



                                     55 	_g_AppSignature::
                                     56 		.dw		APP_SIGN_NAME
                                     57 		.dw		APP_SIGN_ID
                                     58 	.endif
                                     59 	; .ifdef APP_SIGN_EXTRA
                                     60 		; .db		APP_SIGN_EXTRA
                                     61 	; .endif
                                     62 	crt0_basic_exec:
                                     63 
                                     64 .endm
                                     65 
                                     66 ;==============================================================================
                                     67 ; MAPPER
                                     68 ;==============================================================================
                                     69 
                                     70 ;------------------------------------------------------------------------------
                                     71 ; Bank switching addresses
                                     72 ;------------------------------------------------------------------------------
                                     73 
                                     74 ; ROM_ASCII8
                         00000000    75 .ifeq ROM_MAPPER-ROM_ASCII8
                                     76 	BANK0_ADDR = #0x6000
                                     77 	BANK1_ADDR = #0x6800
                                     78 	BANK2_ADDR = #0x7000
                                     79 	BANK3_ADDR = #0x7800
                                     80 	BANKED_ADDR = BANK2_ADDR
                                     81 .endif
                                     82 ; ROM_ASCII16
                         00000000    83 .ifeq ROM_MAPPER-ROM_ASCII16
                                     84 	BANK0_ADDR = #0x6000
                                     85 	BANK1_ADDR = #0x77FF
                                     86 	BANKED_ADDR = BANK1_ADDR
                                     87 .endif
                                     88 ; ROM_KONAMI
                         00000000    89 .ifeq ROM_MAPPER-ROM_KONAMI
                                     90 	BANK1_ADDR = #0x6000
                                     91 	BANK2_ADDR = #0x8000
                                     92 	BANK3_ADDR = #0xA000
                                     93 	BANKED_ADDR = BANK2_ADDR
                                     94 .endif
                                     95 ; ROM_KONAMI_SCC
                         00000000    96 .ifeq ROM_MAPPER-ROM_KONAMI_SCC
                                     97 	BANK0_ADDR = #0x5000
                                     98 	BANK1_ADDR = #0x7000
                                     99 	BANK2_ADDR = #0x9000
                                    100 	BANK3_ADDR = #0xB000
                                    101 	BANKED_ADDR = BANK2_ADDR
                                    102 .endif
                                    103 ; ROM_NEO8
                         00000000   104 .ifeq ROM_MAPPER-ROM_NEO8
                                    105 	BANK0_ADDR = #0x5000
                                    106 	BANK1_ADDR = #0x5800
                                    107 	BANK2_ADDR = #0x6000
                                    108 	BANK3_ADDR = #0x6800
                                    109 	BANK4_ADDR = #0x7000
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 8
Hexadecimal [32-Bits]



                                    110 	BANK5_ADDR = #0x7800
                                    111 	BANKED_ADDR = BANK4_ADDR
                                    112 .endif
                                    113 ; ROM_NEO16
                         00000000   114 .ifeq ROM_MAPPER-ROM_NEO16
                                    115 	BANK0_ADDR = #0x5000
                                    116 	BANK1_ADDR = #0x6000
                                    117 	BANK2_ADDR = #0x7000
                                    118 	BANKED_ADDR = BANK2_ADDR
                                    119 .endif
                                    120 ; ROM_YAMANOOTO
                         00000000   121 .ifeq ROM_MAPPER-ROM_YAMANOOTO
                                    122 	BANK0_ADDR = #0x5000
                                    123 	BANK1_ADDR = #0x7000
                                    124 	BANK2_ADDR = #0x9000
                                    125 	BANK3_ADDR = #0xB000
                                    126 	BANKED_ADDR = BANK2_ADDR
                                    127 .endif
                                    128 ; ROM_ASCII16-X
                         00000000   129 .ifeq ROM_MAPPER-ROM_ASCII16X
                                    130 	BANK0_ADDR = #0x6000
                                    131 	BANK1_ADDR = #0x7000
                                    132 	BANKED_ADDR = BANK1_ADDR
                                    133 .endif
                                    134 
                                    135 ;==============================================================================
                                    136 ; HELPER
                                    137 ;==============================================================================
                                    138 
                                    139 ;------------------------------------------------------------------------------
                                    140 ; Initialize globals
                                    141 ;------------------------------------------------------------------------------
                                    142 .macro INIT_GLOBALS
                                    143 
                                    144 	crt0_init_globals:
                                    145 		ld		bc, #l__INITIALIZER
                                    146 		ld		a, b
                                    147 		or		a, c
                                    148 		jp		z, crt0_skip_globals
                                    149 		ld		de, #s__INITIALIZED
                                    150 		ld		hl, #s__INITIALIZER
                                    151 		ldir
                                    152 	crt0_skip_globals:
                                    153 
                                    154 .endm
                                    155 
                                    156 ;------------------------------------------------------------------------------
                                    157 ; Set page #2 at the same slot than the page #1 (for 32K ROM)
                                    158 ;------------------------------------------------------------------------------
                                    159 .macro INIT_P1_TO_P2
                                    160 
                                    161 	crt0_p1_to_p2::
                                    162 		in		a, (PPI_A)				; A=[P3|P2|P1|P0] Get primary slots info
                                    163 		rrca
                                    164 		rrca							; A=[P0|P3|P2|P1]
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                          Page 9
Hexadecimal [32-Bits]



                                    165 		and		a, #0b00000011			; A=[00|00|00|P1] Save Page 1 primary slot
                                    166 		ld		c, a					; C=[00|00|00|P1]
                                    167 		ld		hl, #EXPTBL				; HL=&EXPTBL
                                    168 		add		a, l
                                    169 		ld		l, a
                                    170 		ld		a, (hl)					; A=EXPTBL[P1]    See if the slot is expanded or not
                                    171 		and		a, #0x80				; A=[X|000|00|00] Keep only expansion flag
                                    172 		or		a, c					; A=[X|000|00|P1] Set MSB if so
                                    173 		ld		c, a					; C=[X|000|00|P1] Save it to [C]
                                    174 		inc		l						;                 Point to primary slot's SLTTBL entry
                                    175 		inc		l
                                    176 		inc		l
                                    177 		inc		l
                                    178 		ld		a, (hl)					; A=SLTTBL[P1]    Get what is currently output to expansion slot register
                                    179 		and		a, #0b00001100			; A=[00|00|S1|00]
                                    180 		or		c						; A=[X|000|S1|P1] Finally form slot address
                                    181 		ld		h, #0x80				; H=Page 2
                                    182 		call	ENASLT					;                 Enable page 1's slot in page 2
                                    183 .endm
                                    184 
                                    185 ;------------------------------------------------------------------------------
                                    186 ; Set pages #0 and #2 at the same slot than the page #1 (for 48K ROM)
                                    187 ;------------------------------------------------------------------------------
                                    188 .macro INIT_P1_TO_P02
                                    189 
                                    190 	crt0_p1_to_p02::
                                    191 		; Set all pages primary slot equal to page #1 one
                                    192 		in		a, (PPI_A)				; A=[P3|P2|P1|P0] Get primary slots info
                                    193 		ld		d, a					; D=[P3|P2|P1|P0] Backup full slots info
                                    194 		and		a, #0b00001100			; A=[00|00|P1|00] Mask all pages slots but P1 
                                    195 		ld		c, a					; C=[00|00|P1|00] Backup P1
                                    196 		rrca							;                 A>>1
                                    197 		rrca							; A=[00|00|00|P1] A>>1
                                    198 		or		a, c					; A=[00|00|P1|P1]
                                    199 		ld		c, a					; C=[00|00|P1|P1] Backup 
                                    200 		add		a, a					;                 A<<1
                                    201 		add		a, a					; A=[00|P1|P1|00] A<<1
                                    202 		add		a, a					;                 A<<1
                                    203 		add		a, a					; A=[P1|P1|00|00] A<<1
                                    204 		or		a, c					; A=[P1|P1|P1|P1] Merge
                                    205 		out		(PPI_A), a				;                 Set primary slots info
                                    206 		ld		e, a					; E=[P1|P1|P1|P1] Backup new slots
                                    207 
                                    208 		; Set page #0 and 2 at the same secondary slot than page #1 one
                                    209 		ld		a, (SLTSL)				; A=[~3|~2|~1|~0] Read secondary slots register of selected primary slot
                                    210 		cpl								; A=[S3|S2|S1|S0] Reverses the bits
                                    211 		ld		b, a					; B=[S3|S2|S1|S0] Backup secondary slot
                                    212 		and		a, #0b00001100			; A=[00|00|S1|00] Mask all pages secondary slots but P1 
                                    213 		ld		c, a					; C=[00|00|S1|00] Backup
                                    214 		rrca							;                 A>>1
                                    215 		rrca							; A=[00|00|00|S1] A>>1
                                    216 		or		a, c					; A=[00|00|S1|S1] Merge
                                    217 		ld		c, a					; C=[00|00|S1|S1] Backup
                                    218 		add		a, a					;                 A<<1
                                    219 		add		a, a					; A=[00|S1|S1|00] A<<1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 10
Hexadecimal [32-Bits]



                                    220 		or		a, c					; A=[00|S1|S1|S1] Merge
                                    221 		ld		c, a					; C=[00|S1|S1|S1] Backup
                                    222 		ld		a, b					; A=[S3|S2|S1|S0] Restore primary slots info 
                                    223 		and		a, #0b11000000			; A=[S3|00|00|00] Mask all pages slots but P0 
                                    224 		or		a, c					; A=[S3|S1|S1|S0] Merge original P0 and P1 in all other page
                                    225 		ld		(SLTSL), a				;                 Set secondary slot info
                                    226 
                                    227 		; Restore initial Page 3 slot
                                    228 		ld		a, d					; A=[P3|P2|P1|P0] Restore initiale primary slots
                                    229 		and		a, #0b11000000			; A=[P3|00|00|00] Keep page #3 primary slot
                                    230 		ld		c, a					; C=[P3|00|00|00] Backup
                                    231 		ld		a, e					; A=[P1|P1|P1|P1] Restore new primary slots
                                    232 		and		a, #0b00111111			; A=[00|P1|P1|P1] Keep all pages but page #3
                                    233 		or		a, c					; A=[P3|P1|P1|P1] Merge
                                    234 		out		(PPI_A), a				;                 Set primary slots info
                                    235 .endm
                                    236 
                                    237 ;------------------------------------------------------------------------------
                                    238 ; Set page #0 at the same slot than the page #3 (replace Main-ROM by RAM)
                                    239 ; /!\ Need 64 KB of RAM
                                    240 ;------------------------------------------------------------------------------
                                    241 .macro INIT_P3_TO_P0
                                    242 
                                    243 	; crt0_p3_to_p0:
                                    244 	; 	; Set pages #0 primary slot equal to page #3 one
                                    245 	; 	in		a, (PPI_A)				; A=[P3|P2|P1|P0] Get primary slots info 
                                    246 	; 	and		a, #0b11111100			; A=[P3|P2|P1|00] Mask P0 slot 
                                    247 	; 	ld		b, a					; B=[P3|P2|P1|00] Backup
                                    248 	; 	and		a, #0b11000000			; A=[P3|00|00|00] Mask all pages slots but P3 
                                    249 	; 	rlca							;                 A<<1
                                    250 	; 	rlca							; A=[00|00|00|P3] A<<1
                                    251 	; 	or		a, b					; A=[P3|P2|P1|P3] Merge
                                    252 	; 	out		(PPI_A), a				;                 Set primary slots info
                                    253 
                                    254 	; 	; Set page #0 seconday slot equal to page #3 one
                                    255 	; 	ld		a, (SLTSL)				; A=[~3|~2|~1|~0] Read secondary slots register of selected primary slot
                                    256 	; 	cpl								; A=[S3|S2|S1|S0] Reverses the bits
                                    257 	; 	and		a, #0b11111100			; A=[S3|S2|S1|00] Mask S0 slot 
                                    258 	; 	ld		b, a					; B=[S3|S2|S1|00] Backup
                                    259 	; 	and		a, #0b11000000			; A=[S3|00|00|00] Mask all pages slots but S3 
                                    260 	; 	rlca							;                 A<<1
                                    261 	; 	rlca							; A=[00|00|00|S3] A<<1
                                    262 	; 	or		a, b					; A=[S3|S2|S1|S3] Merge
                                    263 	; 	ld		(SLTSL), a				;                 Set secondary slot info
                                    264 
                                    265 	crt0_p3_to_p0::
                                    266 
                                    267 		; Code by retrocanada76
                                    268 		; https://msx.org/forum/msx-talk/development/msxgl-%E2%80%93-a-new-c-game-library-for-msx?page=28
                                    269 
                                    270 		; D = current SLOT config (P3|P2|P1|P0)
                                    271 		; E = current SLTSL reg (P3)
                                    272 		in		a, (PPI_A)				; get current SLOTs
                                    273 		ld		e, a					; save for later (E)
                                    274 		ld		a, (SLTSL)				
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 11
Hexadecimal [32-Bits]



                                    275 		cpl								; get current SSLOTs (P3)
                                    276 		ld		d,a						; save for later (D)
                                    277 
                                    278 		; Set pages #0 primary slot equal to page #3 one
                                    279 		in		a, (PPI_A)				; A=[P3|P2|P1|P0] Get primary slots info 
                                    280 		and		a, #0b11111100			; A=[P3|P2|P1|00] Mask P0 slot 
                                    281 		ld		b, a					; B=[P3|P2|P1|00] Backup
                                    282 		and		a, #0b11000000			; A=[P3|00|00|00] Mask all pages slots but P3 
                                    283 		rlca							;                 A<<1
                                    284 		rlca							; A=[00|00|00|P3] A<<1
                                    285 		or		a, b					; A=[P3|P2|P1|P3] Merge
                                    286 		out		(PPI_A), a				;                 Set primary slots info
                                    287 
                                    288 		; Set page #0 seconday slot equal to page #3 one
                                    289 		ld		a, (SLTSL)				; A=[~3|~2|~1|~0] Read secondary slots register of selected primary slot
                                    290 		cpl								; A=[S3|S2|S1|S0] Reverses the bits
                                    291 		and		a, #0b11111100			; A=[S3|S2|S1|00] Mask S0 slot 
                                    292 		ld		b, a					; B=[S3|S2|S1|00] Backup
                                    293 		and		a, #0b11000000			; A=[S3|00|00|00] Mask all pages slots but S3 
                                    294 		rlca							;                 A<<1
                                    295 		rlca							; A=[00|00|00|S3] A<<1
                                    296 		or		a, b					; A=[S3|S2|S1|S3] Merge
                                    297 		ld		(SLTSL), a				;                 Set secondary slot info
                                    298 
                                    299 		ld		a,(0)					; read from P0
                                    300 		ld		h,a						; save for comparison
                                    301 		cpl								; make it inverse
                                    302 		ld		(0),a					; write back to P0
                                    303 		ld		a,(0)					; read again
                                    304 		cp		h						; compare against original
                                    305 		jr		nz, #ram_found			; not the same ? RAM found here
                                    306 
                                    307 		; RAM deep search
                                    308 		; this routine search for RAM on P0. It searches each subslot as the RAM might be fragmented (Victor HC-80 or Sony HB-F900 rev1)
                                    309 		; it could be also MSX1s with RAM expansion cards
                                    310 		; into several 16K chunks.
                                    311 		; B = probing SSLOT (3 - 0)
                                    312 		; C = probing SLOT (3 - 0) (P3|P0)
                                    313 		; L = saved SLTSL reg for probing SLOT
                                    314 
                                    315 		ld		a,#0b11000011			; set probing SLOTs P0 and P3 to SLOT 3
                                    316 
                                    317 	slot_loop:
                                    318 		ld		c,a						; save probing P0 and P3
                                    319 
                                    320 		in		a, (PPI_A)				; read current SLOTs
                                    321 		and		#0b00111100				; mask out P0 and P3
                                    322 		or		c						; set P0 and P3 to current probing SLOTs
                                    323 		out		(PPI_A),a				
                                    324 
                                    325 		ld		b, #4					; probe for 4 SSLOTs	
                                    326 	sslot_loop:
                                    327 		ld		a, (SLTSL)				; read SSLOT reg
                                    328 		cpl								; get current SSLOTs for probing SLOT
                                    329 		ld		l, a					; save for later (L)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 12
Hexadecimal [32-Bits]



                                    330 		and		#0b11111100				; mask out P0
                                    331 		dec		b						; dec probing SSLOT (started on #4)
                                    332 		or		b						; set probing P0 SSLOT
                                    333 		ld		(SLTSL), a				; write SSLOT reg
                                    334 
                                    335 		ld		a,(0)					; read from P0
                                    336 		ld		h,a						; save for comparison
                                    337 		cpl								; make it inverse
                                    338 		ld		(0),a					; write back to P0
                                    339 		ld		a,(0)					; read again
                                    340 		cp		h						; compare against original
                                    341 		jr		nz, #ram_found			; not the same ? RAM found here
                                    342 
                                    343 		xor		a						; this SSLOT is not RAM
                                    344 		or 		b 						; check SSLOT counter
                                    345 		jr		nz, #sslot_loop			; repeat if still SSLOT left
                                    346 
                                    347 		ld		a,l						; no more SSLOTs for this SLOT
                                    348 		ld 		(SLTSL), a				; restore saved SSLOT for probing SLOT (L)
                                    349 
                                    350 		ld		a, e
                                    351 		out		(PPI_A), a 				; restore saved SLOT (E)
                                    352 		ld		a, d
                                    353 		ld		(SLTSL), a 				; restore saved SSLOT (D)
                                    354 
                                    355 		xor		a
                                    356 		or		c						; has ended ?
                                    357 		jr		z, #ram_not_found
                                    358 		sub		#0b01000001				; dec SLOTS P0 and P3
                                    359 		jr		#slot_loop				; repeat next slot
                                    360 
                                    361 	ram_found:
                                    362 		cpl								; ram has been found
                                    363 		ld		(0),a 					; restore original RAM content
                                    364 
                                    365 		ld		a,e						; now we found P0 ram lets 
                                    366 		and		#0b11000000				; extract P3 original SLOT
                                    367 		ld		e,a						; keep only original P3
                                    368 
                                    369 		in		a,(PPI_A)				; read actual SLOT config
                                    370 		and		#0b00111111				; mask out P3 from current config
                                    371 		or		e
                                    372 		out		(PPI_A),a				; set back original P3 SLOT
                                    373 
                                    374 		ld		a, d					; do the same now with SSLOT
                                    375 		and		#0b11000000				; extract P3 from original SSLOT
                                    376 		ld		d,a
                                    377 		ld		a,(SLTSL)				; read actual SSLOT
                                    378 		cpl
                                    379 		and		#0b00111111				; mask out P3
                                    380 		or		d						; set back original P3 SSLOT
                                    381 		ld		(SLTSL), a 				; restore orig sslot
                                    382 
                                    383 	ram_not_found:
                                    384 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 13
Hexadecimal [32-Bits]



                                    385 .endm
                                    386 
                                    387 ;------------------------------------------------------------------------------
                                    388 ; Check for skip key press
                                    389 ;------------------------------------------------------------------------------
                                    390 .macro SKIP_BOOT
                                    391 	.if ROM_SKIP
                                    392 	; Check for 'ESC' key press
                                    393 	ctr0_check_rom_skip:
                                    394 		in		a, (PPI_C)
                                    395 		and		#0xF0					; only change bits 0-3
                                    396 		or		#7						; check row number 7
                                    397 		out		(PPI_C), a
                                    398 		in		a, (PPI_B)				; read row into A
                                    399 		and		#ROM_SKIP_KEY
                                    400 		ret		z
                                    401 	.endif
                                    402 .endm
                                    403 
                                    404 ;------------------------------------------------------------------------------
                                    405 ; Delay boot using STKE hook
                                    406 ;------------------------------------------------------------------------------
                                    407 .macro DELAY_BOOT
                                    408 	.if ROM_DELAY
                                    409 	; Setup the hook H.STKE to run the ROM with disk support
                                    410 	crt0_bdos_install::
                                    411 		ld		a, c					; Get the ROM slot number
                                    412 		ld		hl, #crt0_bdos_hook
                                    413 		ld		de, #H_STKE
                                    414 		ld		bc, #4
                                    415 		ldir							; Copy the routine to execute the ROM to the hook
                                    416 		ld		(H_STKE+1), a			; Put the ROM slot number to the hook
                                    417 		ret								; Back to slots scanning
                                    418 
                                    419 	; Routine to execute the ROM
                                    420 	crt0_bdos_hook:
                                    421 		rst		0x30					; Inter-slot call
                                    422 		.db		1						; This byte will be replaced by the slot number of ROM
                                    423 		.dw		crt0_bdos_end			; Address to execute the ROM
                                    424 
                                    425 	; Remove the hook and resume the ROM boot sequence
                                    426 	crt0_bdos_end:
                                    427 		ld		a, #0xC9				; 'ret' instruction
                                    428 		ld		(H_STKE), a
                                    429 	.endif
                                    430 .endm
                                    431 
                                    432 ;------------------------------------------------------------------------------
                                    433 ; Interrupt Service Routine
                                    434 ;------------------------------------------------------------------------------
                                    435 
                                    436 ;..............................................................................
                                    437 ; All interruption ISR
                         00000000   438 .ifeq ROM_ISR-ISR_ALL
                                    439 .macro INCLUDE_ISR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 14
Hexadecimal [32-Bits]



                                    440 		.globl	_VDP_InterruptHandler
                                    441 	crt0_interrupt_start::
                                    442 	; Backup registers
                                    443 		push	af
                                    444 		push	hl
                                    445 		push	de
                                    446 		push	bc
                                    447 		exx
                                    448 		ex		af, af'
                                    449 		push	af
                                    450 		push	hl
                                    451 		push	de
                                    452 		push	bc
                                    453 		push	iy
                                    454 		push	ix
                                    455 	; Call interruption handler
                                    456 		call	_VDP_InterruptHandler
                                    457 	; Restore registers
                                    458 		pop		ix
                                    459 		pop		iy
                                    460 		pop		bc
                                    461 		pop		de
                                    462 		pop		hl
                                    463 		pop		af
                                    464 		ex		af, af'
                                    465 		exx
                                    466 		pop		bc
                                    467 		pop		de
                                    468 		pop		hl
                                    469 		pop		af
                                    470 		ei
                                    471 		reti
                                    472 	crt0_interrupt_end:
                                    473 .endm
                                    474 .endif
                                    475 
                                    476 ;..............................................................................
                                    477 ; V-Blank ISR
                         00000001   478 .ifeq ROM_ISR-ISR_VBLANK
                                    479 .macro INCLUDE_ISR
                                    480 		.globl	_VDP_InterruptHandler
                                    481 	crt0_interrupt_start::
                                    482 	; Skip interruptions that do not come from the VDP.
                                    483 		push	af
                                    484 	; Reset R#15 to S#0
                                    485 	.if ISR_SET_S0
                                    486 		xor		a
                                    487 		out		(VDP_A), a
                                    488 		ld		a, #(0x80 + 15)
                                    489 		out		(VDP_A),a
                                    490 	.endif
                                    491 		in		a, (VDP_S)
                                    492 		rlca
                                    493 		jr		nc, crt0_interrupt_skip
                                    494 	; Backup registers
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 15
Hexadecimal [32-Bits]



                                    495 		push	hl
                                    496 		push	de
                                    497 		push	bc
                                    498 		exx
                                    499 		ex		af, af'
                                    500 		push	af
                                    501 		push	hl
                                    502 		push	de
                                    503 		push	bc
                                    504 		push	iy
                                    505 		push	ix
                                    506 	; Call VDP interruption handler
                                    507 		call	_VDP_InterruptHandler
                                    508 	; Restore registers
                                    509 		pop		ix
                                    510 		pop		iy
                                    511 		pop		bc
                                    512 		pop		de
                                    513 		pop		hl
                                    514 		pop		af
                                    515 		ex		af, af'
                                    516 		exx
                                    517 		pop		bc
                                    518 		pop		de
                                    519 		pop		hl
                                    520 	; Restore registers
                                    521 	crt0_interrupt_skip:
                                    522 		pop		af
                                    523 		ei
                                    524 		reti
                                    525 	crt0_interrupt_end:
                                    526 .endm
                                    527 .endif
                                    528 
                                    529 ;..............................................................................
                                    530 ; V-Blank & H-Blank ISR
                         00000000   531 .ifeq ROM_ISR-ISR_VHBLANK
                                    532 .macro INCLUDE_ISR
                                    533 		.globl	_VDP_InterruptHandler
                                    534 		.globl	_VDP_HBlankHandler
                                    535 
                                    536 	crt0_interrupt_start::
                                    537 	; Backup registers
                                    538 		push	af
                                    539 		push	hl
                                    540 		push	de
                                    541 		push	bc
                                    542 		exx
                                    543 		ex		af, af'
                                    544 		push	af
                                    545 		push	hl
                                    546 		push	de
                                    547 		push	bc
                                    548 		push	iy
                                    549 		push	ix
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 16
Hexadecimal [32-Bits]



                                    550 	; Reset R#15 to S#0
                                    551 	.if ISR_SET_S0
                                    552 		xor		a
                                    553 		out		(VDP_A), a
                                    554 		ld		a, #(0x80 + 15)
                                    555 		out		(VDP_A),a
                                    556 	.endif
                                    557 	; Check V-Blank
                                    558 		in		a, (VDP_S)					; Get S#0 value
                                    559 		rlca
                                    560 		call	c, _VDP_InterruptHandler 	; Call VDP interruption handler
                                    561 	; Check H-Blank
                                    562 		ld		a, #1
                                    563 		out		(VDP_A), a
                                    564 		ld		a, #(0x80 + 15)
                                    565 		out		(VDP_A), a
                                    566 		in		a, (VDP_S)
                                    567 		rrca								; Call H-Blank if bit #0 of S#1 is set 
                                    568 		call	c, _VDP_HBlankHandler		; call to C function HBlankHook()
                                    569 	; Reset R#15 to S#0
                                    570 		xor		a
                                    571 		out		(VDP_A), a
                                    572 		ld		a, #(0x80 + 15)
                                    573 		out		(VDP_A),a
                                    574 	; Restore registers
                                    575 		pop		ix
                                    576 		pop		iy
                                    577 		pop		bc
                                    578 		pop		de
                                    579 		pop		hl
                                    580 		pop		af
                                    581 		ex		af, af'
                                    582 		exx
                                    583 		pop		bc
                                    584 		pop		de
                                    585 		pop		hl
                                    586 		pop		af
                                    587 		ei
                                    588 		reti
                                    589 	crt0_interrupt_end:
                                    590 .endm
                                    591 .endif
                                    592 
                                    593 ;..............................................................................
                                    594 ; V9990 ISR
                         00000000   595 .ifeq ROM_ISR-ISR_V9990
                                    596 .macro INCLUDE_ISR
                                    597 		.globl	_V9_InterruptVBlank
                                    598 		.globl	_V9_InterruptHBlank
                                    599 		.globl	_V9_InterruptCommand
                                    600 
                                    601 	crt0_interrupt_start::
                                    602 	; Skip interruptions that do not come from the VDP.
                                    603 		push	af
                                    604 		in		a, (V9_P06)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 17
Hexadecimal [32-Bits]



                                    605 		or		a
                                    606 		jr		z, crt0_interrupt_skip ; Quick skip (before full register backup)
                                    607 	; Backup registers
                                    608 		push	hl
                                    609 		push	de
                                    610 		push	bc
                                    611 		exx
                                    612 		ex		af, af'
                                    613 		push	af
                                    614 		push	hl
                                    615 		push	de
                                    616 		push	bc
                                    617 		push	iy
                                    618 		push	ix
                                    619 	; Call VDP interruption handler
                                    620 		in		a, (V9_P06)			; Get P#6 again (quicker than push/pop the value)
                                    621 		out		(V9_P06), a			; Reset interrupt bits
                                    622 	; V-Blank interruption
                                    623 		rra
                                    624 		call	c, _V9_InterruptVBlank
                                    625 	; H-Blank interruption
                                    626 		rra
                                    627 		call	c, _V9_InterruptHBlank
                                    628 	; Command end interruption
                                    629 		rra
                                    630 		call	c, _V9_InterruptCommand
                                    631 	; Restore registers
                                    632 		pop		ix
                                    633 		pop		iy
                                    634 		pop		bc
                                    635 		pop		de
                                    636 		pop		hl
                                    637 		pop		af
                                    638 		ex		af, af'
                                    639 		exx
                                    640 		pop		bc
                                    641 		pop		de
                                    642 		pop		hl
                                    643 	; Restore registers
                                    644 	crt0_interrupt_skip:
                                    645 		pop		af
                                    646 		ei
                                    647 		reti
                                    648 	crt0_interrupt_end:
                                    649 .endm
                                    650 .endif
                                    651 
                                    652 ;------------------------------------------------------------------------------
                                    653 ; Backup Main-ROM's MSX info before switching out the BIOS from page 0
                                    654 ;------------------------------------------------------------------------------
                                    655 .macro ALLOC_ROMINFO
                                    656 	_g_VersionROM::
                                    657 		.ds		1
                                    658 	_g_VersionMSX::
                                    659 		.ds		1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 18
Hexadecimal [32-Bits]



                                    660 .endm
                                    661 
                                    662 .macro BACKUP_ROMINFO
                                    663 	ld		a, (ROMVER)
                                    664 	ld		(#_g_VersionROM), a
                                    665 	ld		a, (MSXVER)
                                    666 	ld		(#_g_VersionMSX), a
                                    667 .endm
                                    668 
                                    669 ;------------------------------------------------------------------------------
                                    670 ; Install ISR in RAM
                                    671 ; (needs 64 KB of RAM in Page #3's slot)
                                    672 ;------------------------------------------------------------------------------
                                    673 .macro INSTALL_RAM_ISR
                                    674 	.ifne ROM_RAMISR-RAM0_NONE
                                    675 
                                    676 	crt0_select_ram::
                                    677 
                                    678 	; Backup Page 0 (Main-ROM) information
                                    679 		BACKUP_ROMINFO
                                    680 
                                    681 		jp		crt0_interrupt_end
                                    682 
                                    683 	; ISR
                                    684 		INCLUDE_ISR
                                    685 
                                    686 	; Switch page 0 to RAM
                                    687 		INIT_P3_TO_P0
                                    688 
                                    689 	; Copy ISR to RAM
                                    690 	crt0_install_isr::
                                    691 		ld		hl, #crt0_interrupt_start
                                    692 		ld		de, #0x0038
                                    693 		ld		bc, #crt0_interrupt_end-crt0_interrupt_start
                                    694 		ldir
                                    695 
                                    696 		.ifeq ROM_RAMISR-RAM0_SEGMENT
                                    697 	crt0_install_seg::
                                    698 
                                    699 			.ifeq ROM_MAPPER-ROM_ASCII8
                                    700 				ld		a, #4
                                    701 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                    702 				inc		a
                                    703 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                    704 			.endif
                                    705 			.ifeq ROM_MAPPER-ROM_ASCII16
                                    706 				ld		a, #2
                                    707 				ld		(BANK1_ADDR), a ; Segment 2 in Bank 1
                                    708 			.endif
                                    709 			.ifeq ROM_MAPPER-ROM_KONAMI
                                    710 				ld		a, #4
                                    711 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                    712 				inc		a
                                    713 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                    714 			.endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 19
Hexadecimal [32-Bits]



                                    715 			.ifeq ROM_MAPPER-ROM_KONAMI_SCC
                                    716 				ld		a, #4
                                    717 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                    718 				inc		a
                                    719 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                    720 			.endif
                                    721 			.ifeq ROM_MAPPER-ROM_NEO8
                                    722 				ld		a, #6
                                    723 				ld		(BANK4_ADDR), a ; Segment 6 in Bank 4
                                    724 				inc		a
                                    725 				ld		(BANK5_ADDR), a ; Segment 7 in Bank 5
                                    726 			.endif
                                    727 			.ifeq ROM_MAPPER-ROM_NEO16
                                    728 				ld		a, #3
                                    729 				ld		(BANK2_ADDR), a ; Segment 3 in Bank 2
                                    730 			.endif
                                    731 			.ifeq ROM_MAPPER-ROM_YAMANOOTO
                                    732 				ld		a, #4
                                    733 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                    734 				inc		a
                                    735 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                    736 			.endif
                                    737 			.ifeq ROM_MAPPER-ROM_ASCII16X
                                    738 				ld		a, #2
                                    739 				ld		(BANK1_ADDR), a ; Segment 2 in Bank 1
                                    740 			.endif
                                    741 
                                    742 		; Copy Segment content to RAM
                                    743 			ld		hl, #0x8100 ; Page 2
                                    744 			ld		de, #0x0100 ; Page 0 (after ISR)
                                    745 			ld		bc, #0x3F00 ; 16 KB - 100h
                                    746 			ldir
                                    747 		.endif
                                    748 
                                    749 	.endif
                                    750 .endm
                                    751 
                                    752 
                                    753 ;------------------------------------------------------------------------------
                                    754 ; Add banked call trampoline
                                    755 ;------------------------------------------------------------------------------
                                    756 .macro SUPPORT_BANKED_CALL
                                    757 	.if ROM_BCALL
                                    758 	; Set segment (get value from register A)
                                    759 	set_bank::
                                    760 		ld		(BANKED_ADDR), a ; Address used to switch defaut bank for banked call
                                    761 		ld		(_g_CurrentSegment), a
                                    762 		ret
                                    763 
                                    764 	; Get segment (return value in register A)
                                    765 	get_bank::
                                    766 		ld		a, (_g_CurrentSegment)
                                    767 		ret
                                    768 	.endif
                                    769 .endm
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 20
Hexadecimal [32-Bits]



                                    770 
                                    771 ;==============================================================================
                                    772 ; ROM MAPPER
                                    773 ;==============================================================================
                                    774 
                                    775 ;------------------------------------------------------------------------------
                                    776 ; ROM_PLAIN
                                    777 ;------------------------------------------------------------------------------
                         00000001   778 .ifeq ROM_MAPPER-ROM_PLAIN
                                    779 
                                    780 	.macro ALLOC_MAPPER
                                    781 	.endm
                                    782 
                                    783 	.macro INIT_MAPPER
                                    784 	.endm
                                    785 
                                    786 .endif
                                    787 
                                    788 ;------------------------------------------------------------------------------
                                    789 ; ROM_ASCII8
                                    790 ;------------------------------------------------------------------------------
                         00000000   791 .ifeq ROM_MAPPER-ROM_ASCII8
                                    792 
                                    793 	.macro ALLOC_MAPPER
                                    794 		_g_Bank0Segment::
                                    795 			.ds 1
                                    796 		_g_Bank1Segment::
                                    797 			.ds 1
                                    798 		_g_CurrentSegment::
                                    799 		_g_Bank2Segment::
                                    800 			.ds 1
                                    801 		_g_Bank3Segment::
                                    802 			.ds 1
                                    803 	.endm
                                    804 
                                    805 	.macro INIT_MAPPER
                                    806 		xor		a
                                    807 		ld		(BANK0_ADDR), a ; Segment 0 in Bank 0
                                    808 		ld		(_g_Bank0Segment), a
                                    809 		inc		a
                                    810 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                    811 		ld		(_g_Bank1Segment), a
                                    812 		inc		a
                                    813 		ld		(BANK2_ADDR), a ; Segment 2 in Bank 2
                                    814 		ld		(_g_Bank2Segment), a
                                    815 		inc		a
                                    816 		ld		(BANK3_ADDR), a ; Segment 3 in Bank 3
                                    817 		ld		(_g_Bank3Segment), a
                                    818 	.endm
                                    819 
                                    820 .endif
                                    821 
                                    822 ;------------------------------------------------------------------------------
                                    823 ; ROM_ASCII16
                                    824 ;------------------------------------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 21
Hexadecimal [32-Bits]



                         00000000   825 .ifeq ROM_MAPPER-ROM_ASCII16
                                    826 
                                    827 	.macro ALLOC_MAPPER
                                    828 		_g_Bank0Segment::
                                    829 			.ds 1
                                    830 		_g_CurrentSegment::
                                    831 		_g_Bank1Segment::
                                    832 			.ds 1
                                    833 	.endm
                                    834 
                                    835 	.macro INIT_MAPPER
                                    836 		xor		a
                                    837 		ld		(BANK0_ADDR), a ; Segment 0 in Bank 0
                                    838 		ld		(_g_Bank0Segment), a
                                    839 		inc		a
                                    840 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                    841 		ld		(_g_Bank1Segment), a
                                    842 	.endm
                                    843 
                                    844 .endif
                                    845 
                                    846 ;------------------------------------------------------------------------------
                                    847 ; ROM_KONAMI
                                    848 ;------------------------------------------------------------------------------
                         00000000   849 .ifeq ROM_MAPPER-ROM_KONAMI
                                    850 
                                    851 	.macro ALLOC_MAPPER
                                    852 		_g_Bank0Segment::
                                    853 			.ds 1
                                    854 		_g_Bank1Segment::
                                    855 			.ds 1
                                    856 		_g_CurrentSegment::
                                    857 		_g_Bank2Segment::
                                    858 			.ds 1
                                    859 		_g_Bank3Segment::
                                    860 			.ds 1
                                    861 	.endm
                                    862 
                                    863 	.macro INIT_MAPPER
                                    864 		xor		a
                                    865 		ld		(_g_Bank0Segment), a
                                    866 		inc		a
                                    867 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                    868 		ld		(_g_Bank1Segment), a
                                    869 		inc		a
                                    870 		ld		(BANK2_ADDR), a ; Segment 2 in Bank 2
                                    871 		ld		(_g_Bank2Segment), a
                                    872 		inc		a
                                    873 		ld		(BANK3_ADDR), a ; Segment 3 in Bank 3
                                    874 		ld		(_g_Bank3Segment), a
                                    875 	.endm
                                    876 
                                    877 .endif
                                    878 
                                    879 ;------------------------------------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 22
Hexadecimal [32-Bits]



                                    880 ; ROM_KONAMI_SCC
                                    881 ;------------------------------------------------------------------------------
                         00000000   882 .ifeq ROM_MAPPER-ROM_KONAMI_SCC
                                    883 
                                    884 	.macro ALLOC_MAPPER
                                    885 		_g_Bank0Segment::
                                    886 			.ds 1
                                    887 		_g_Bank1Segment::
                                    888 			.ds 1
                                    889 		_g_CurrentSegment::
                                    890 		_g_Bank2Segment::
                                    891 			.ds 1
                                    892 		_g_Bank3Segment::
                                    893 			.ds 1
                                    894 	.endm
                                    895 
                                    896 	.macro INIT_MAPPER
                                    897 		xor		a
                                    898 		ld		(BANK0_ADDR), a ; Segment 0 in Bank 0
                                    899 		ld		(_g_Bank0Segment), a
                                    900 		inc		a
                                    901 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                    902 		ld		(_g_Bank1Segment), a
                                    903 		inc		a
                                    904 		ld		(BANK2_ADDR), a ; Segment 2 in Bank 2
                                    905 		ld		(_g_Bank2Segment), a
                                    906 		inc		a
                                    907 		ld		(BANK3_ADDR), a ; Segment 3 in Bank 3
                                    908 		ld		(_g_Bank3Segment), a
                                    909 	.endm
                                    910 
                                    911 .endif
                                    912 
                                    913 ;------------------------------------------------------------------------------
                                    914 ; ROM_NEO8
                                    915 ;------------------------------------------------------------------------------
                         00000000   916 .ifeq ROM_MAPPER-ROM_NEO8
                                    917 
                                    918 	.macro ALLOC_MAPPER
                                    919 		_g_Bank0Segment::
                                    920 			.ds 2
                                    921 		_g_Bank1Segment::
                                    922 			.ds 2
                                    923 		_g_Bank2Segment::
                                    924 			.ds 2
                                    925 		_g_Bank3Segment::
                                    926 			.ds 2
                                    927 		_g_CurrentSegment::
                                    928 		_g_Bank4Segment::
                                    929 			.ds 2
                                    930 		_g_Bank5Segment::
                                    931 			.ds 2
                                    932 	.endm
                                    933 
                                    934 	.macro INIT_MAPPER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 23
Hexadecimal [32-Bits]



                                    935 		ld		hl, #0x0000
                                    936 		ld		(BANK2_ADDR), hl ; Segment 0 in Bank 2
                                    937 		ld		(_g_Bank2Segment), hl
                                    938 		inc		hl
                                    939 		ld		(BANK3_ADDR), hl ; Segment 1 in Bank 3
                                    940 		ld		(_g_Bank3Segment), hl
                                    941 		inc		hl
                                    942 		ld		(BANK4_ADDR), hl ; Segment 2 in Bank 4
                                    943 		ld		(_g_Bank4Segment), hl
                                    944 		inc		hl
                                    945 		ld		(BANK5_ADDR), hl ; Segment 3 in Bank 5
                                    946 		ld		(_g_Bank5Segment), hl
                                    947 		inc		hl
                                    948 		ld		(BANK0_ADDR), hl ; Segment 4 in Bank 0
                                    949 		ld		(_g_Bank0Segment), hl
                                    950 		inc		hl
                                    951 		ld		(BANK1_ADDR), hl ; Segment 5 in Bank 1
                                    952 		ld		(_g_Bank1Segment), hl
                                    953 
                                    954 	.endm
                                    955 
                                    956 .endif
                                    957 
                                    958 ;------------------------------------------------------------------------------
                                    959 ; ROM_NEO16
                                    960 ;------------------------------------------------------------------------------
                         00000000   961 .ifeq ROM_MAPPER-ROM_NEO16
                                    962 
                                    963 	.macro ALLOC_MAPPER
                                    964 		_g_Bank0Segment::
                                    965 			.ds 2
                                    966 		_g_Bank1Segment::
                                    967 			.ds 2
                                    968 		_g_CurrentSegment::
                                    969 		_g_Bank2Segment::
                                    970 			.ds 2
                                    971 	.endm
                                    972 
                                    973 	.macro INIT_MAPPER
                                    974 		ld		hl, #0x0000
                                    975 		ld		(BANK1_ADDR), hl ; Segment 0 in Bank 1
                                    976 		ld		(_g_Bank1Segment), hl
                                    977 		inc		hl
                                    978 		ld		(BANK2_ADDR), hl ; Segment 1 in Bank 2
                                    979 		ld		(_g_Bank2Segment), hl
                                    980 		inc		hl
                                    981 		ld		(BANK0_ADDR), hl ; Segment 2 in Bank 0
                                    982 		ld		(_g_Bank0Segment), hl
                                    983 	.endm
                                    984 
                                    985 .endif
                                    986 
                                    987 ;------------------------------------------------------------------------------
                                    988 ; ROM_YAMANOOTO
                                    989 ;------------------------------------------------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 24
Hexadecimal [32-Bits]



                         00000000   990 .ifeq ROM_MAPPER-ROM_YAMANOOTO
                                    991 
                                    992 	.macro ALLOC_MAPPER
                                    993 		_g_Bank0Segment::
                                    994 			.ds 2
                                    995 		_g_Bank1Segment::
                                    996 			.ds 2
                                    997 		_g_CurrentSegment::
                                    998 		_g_Bank2Segment::
                                    999 			.ds 2
                                   1000 		_g_Bank3Segment::
                                   1001 			.ds 2
                                   1002 	.endm
                                   1003 
                                   1004 	.macro INIT_MAPPER
                                   1005 		ld		a, #YAMA_ENAR_REGEN
                                   1006 		ld		(YAMA_ENAR), a ; Enable mapper
                                   1007 
                                   1008 		xor		a
                                   1009 		ld		(YAMA_OFFR), a ; Set mapper offset to 0
                                   1010 		ld		(YAMA_CFGR), a ; Clear configuration
                                   1011 		ld		(BANK0_ADDR), a ; Segment 0 in Bank 0
                                   1012 		inc		a
                                   1013 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                   1014 		inc		a
                                   1015 		ld		(BANK2_ADDR), a ; Segment 2 in Bank 2
                                   1016 		inc		a
                                   1017 		ld		(BANK3_ADDR), a ; Segment 3 in Bank 3
                                   1018 
                                   1019 		ld		hl, #0x0000
                                   1020 		ld		(_g_Bank0Segment), hl
                                   1021 		inc		hl
                                   1022 		ld		(_g_Bank1Segment), hl
                                   1023 		inc		hl
                                   1024 		ld		(_g_Bank2Segment), hl
                                   1025 		inc		hl
                                   1026 		ld		(_g_Bank3Segment), hl
                                   1027 	.endm
                                   1028 
                                   1029 .endif
                                   1030 
                                   1031 ;------------------------------------------------------------------------------
                                   1032 ; ROM_ASCII16-X
                                   1033 ;------------------------------------------------------------------------------
                         00000000  1034 .ifeq ROM_MAPPER-ROM_ASCII16X
                                   1035 
                                   1036 	.macro ALLOC_MAPPER
                                   1037 		_g_Bank0Segment::
                                   1038 			.ds 2
                                   1039 		_g_CurrentSegment::
                                   1040 		_g_Bank1Segment::
                                   1041 			.ds 2
                                   1042 	.endm
                                   1043 
                                   1044 	.macro INIT_MAPPER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 25
Hexadecimal [32-Bits]



                                   1045 		xor		a
                                   1046 		ld		(BANK0_ADDR), a ; Segment 0 in Bank 0
                                   1047 		ld		(_g_Bank0Segment), a
                                   1048 		inc		a
                                   1049 		ld		(BANK1_ADDR), a ; Segment 1 in Bank 1
                                   1050 		ld		(_g_Bank1Segment), a
                                   1051 	.endm
                                   1052 
                                   1053 .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 26
Hexadecimal [32-Bits]



                                     17 
                                     18 ;==============================================================================
                                     19 ; ROM
                                     20 ;==============================================================================
                                     21 	.area	_HEADER (ABS)
    00004000                         22 	.org	0x4000
                                     23 
                                     24 ;------------------------------------------------------------------------------
                                     25 ; Header
                                     26 	.area	_HOME
                                     27 	.area	_CODE
                                     28 
    00000000                         29 _g_FirstAddr::
    00000000                         30 _g_HeaderAddr::
                                     31 	; ROM header
    00000000                         32 	ROM_HEADER crt0_init
                                      1 
    00000000                          2 	crt0_rom_header::
    00000000 41 42                    3 		.ascii	"AB"
    00000002 14 00                    4 		.dw		crt0_init
    00000004 00 00                    5 		.dw		0x0000
    00000006 00 00                    6 		.dw		0x0000
    00000008 00 00                    7 		.dw		0x0000
    0000000A 00 00                    8 		.dw		0x0000
    0000000C 00 00                    9 		.dw		0x0000
    0000000E 00 00                   10 		.dw		0x0000
                                     11 
    00000010                         12 		ROM_SIGN_MACRO ; empty if AddROMSignature build option is set to false
                                     13 
                         00000001    14 	.if APP_SIGN
    00000010                         15 	_g_AppSignature::
    00000010 47 4C                   16 		.dw		APP_SIGN_NAME
    00000012 54 31                   17 		.dw		APP_SIGN_ID
                                     18 	.endif
                                     19 	; .ifdef APP_SIGN_EXTRA
                                     20 		; .db		APP_SIGN_EXTRA
                                     21 	; .endif
                                     22 
                                     33 
                                     34 ;------------------------------------------------------------------------------
                                     35 ; Initialization code
    00000014                         36 crt0_init:
                                     37 	; Check for skip key press (if ROM_SKIP is set to 1)
    00000014                         38 	SKIP_BOOT
                         00000000     1 	.if ROM_SKIP
                                      2 	; Check for 'ESC' key press
                                      3 	ctr0_check_rom_skip:
                                      4 		in		a, (PPI_C)
                                      5 		and		#0xF0					; only change bits 0-3
                                      6 		or		#7						; check row number 7
                                      7 		out		(PPI_C), a
                                      8 		in		a, (PPI_B)				; read row into A
                                      9 		and		#ROM_SKIP_KEY
                                     10 		ret		z
                                     11 	.endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 27
Hexadecimal [32-Bits]



                                     39 
                                     40 	; Delay startup using STKE hook (if ROM_DELAY is set to 1)
    00000014                         41 	DELAY_BOOT
                         00000000     1 	.if ROM_DELAY
                                      2 	; Setup the hook H.STKE to run the ROM with disk support
                                      3 	crt0_bdos_install::
                                      4 		ld		a, c					; Get the ROM slot number
                                      5 		ld		hl, #crt0_bdos_hook
                                      6 		ld		de, #H_STKE
                                      7 		ld		bc, #4
                                      8 		ldir							; Copy the routine to execute the ROM to the hook
                                      9 		ld		(H_STKE+1), a			; Put the ROM slot number to the hook
                                     10 		ret								; Back to slots scanning
                                     11 
                                     12 	; Routine to execute the ROM
                                     13 	crt0_bdos_hook:
                                     14 		rst		0x30					; Inter-slot call
                                     15 		.db		1						; This byte will be replaced by the slot number of ROM
                                     16 		.dw		crt0_bdos_end			; Address to execute the ROM
                                     17 
                                     18 	; Remove the hook and resume the ROM boot sequence
                                     19 	crt0_bdos_end:
                                     20 		ld		a, #0xC9				; 'ret' instruction
                                     21 		ld		(H_STKE), a
                                     22 	.endif
                                     42 
    00000014 F3               [ 4]   43 	di
                                     44 	; Set stack address at the top of free memory
    00000015 ED 7B 4A FC      [20]   45 	ld		sp, (HIMEM)
                                     46 
                                     47 	; Initialize heap address
    00000019 21 00 00         [10]   48 	ld		hl, #s__HEAP
    0000001C 22 00 00         [16]   49 	ld		(#_g_HeapStartAddress), hl
                                     50 
                                     51 	; Set Page 2 slot equal to Page 1 slot
    0000001F                         52 	INIT_P1_TO_P2
                                      1 
    0000001F                          2 	crt0_p1_to_p2::
    0000001F DB A8            [11]    3 		in		a, (PPI_A)				; A=[P3|P2|P1|P0] Get primary slots info
    00000021 0F               [ 4]    4 		rrca
    00000022 0F               [ 4]    5 		rrca							; A=[P0|P3|P2|P1]
    00000023 E6 03            [ 7]    6 		and		a, #0b00000011			; A=[00|00|00|P1] Save Page 1 primary slot
    00000025 4F               [ 4]    7 		ld		c, a					; C=[00|00|00|P1]
    00000026 21 C1 FC         [10]    8 		ld		hl, #EXPTBL				; HL=&EXPTBL
    00000029 85               [ 4]    9 		add		a, l
    0000002A 6F               [ 4]   10 		ld		l, a
    0000002B 7E               [ 7]   11 		ld		a, (hl)					; A=EXPTBL[P1]    See if the slot is expanded or not
    0000002C E6 80            [ 7]   12 		and		a, #0x80				; A=[X|000|00|00] Keep only expansion flag
    0000002E B1               [ 4]   13 		or		a, c					; A=[X|000|00|P1] Set MSB if so
    0000002F 4F               [ 4]   14 		ld		c, a					; C=[X|000|00|P1] Save it to [C]
    00000030 2C               [ 4]   15 		inc		l						;                 Point to primary slot's SLTTBL entry
    00000031 2C               [ 4]   16 		inc		l
    00000032 2C               [ 4]   17 		inc		l
    00000033 2C               [ 4]   18 		inc		l
    00000034 7E               [ 7]   19 		ld		a, (hl)					; A=SLTTBL[P1]    Get what is currently output to expansion slot register
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 28
Hexadecimal [32-Bits]



    00000035 E6 0C            [ 7]   20 		and		a, #0b00001100			; A=[00|00|S1|00]
    00000037 B1               [ 4]   21 		or		c						; A=[X|000|S1|P1] Finally form slot address
    00000038 26 80            [ 7]   22 		ld		h, #0x80				; H=Page 2
    0000003A CD 24 00         [17]   23 		call	ENASLT					;                 Enable page 1's slot in page 2
                                     53 
                                     54 	; Install ISR in RAM (if ROM_RAMISR is set)
    0000003D                         55 	INSTALL_RAM_ISR
                         00000000     1 	.ifne ROM_RAMISR-RAM0_NONE
                                      2 
                                      3 	crt0_select_ram::
                                      4 
                                      5 	; Backup Page 0 (Main-ROM) information
                                      6 		BACKUP_ROMINFO
                                      7 
                                      8 		jp		crt0_interrupt_end
                                      9 
                                     10 	; ISR
                                     11 		INCLUDE_ISR
                                     12 
                                     13 	; Switch page 0 to RAM
                                     14 		INIT_P3_TO_P0
                                     15 
                                     16 	; Copy ISR to RAM
                                     17 	crt0_install_isr::
                                     18 		ld		hl, #crt0_interrupt_start
                                     19 		ld		de, #0x0038
                                     20 		ld		bc, #crt0_interrupt_end-crt0_interrupt_start
                                     21 		ldir
                                     22 
                                     23 		.ifeq ROM_RAMISR-RAM0_SEGMENT
                                     24 	crt0_install_seg::
                                     25 
                                     26 			.ifeq ROM_MAPPER-ROM_ASCII8
                                     27 				ld		a, #4
                                     28 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                     29 				inc		a
                                     30 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                     31 			.endif
                                     32 			.ifeq ROM_MAPPER-ROM_ASCII16
                                     33 				ld		a, #2
                                     34 				ld		(BANK1_ADDR), a ; Segment 2 in Bank 1
                                     35 			.endif
                                     36 			.ifeq ROM_MAPPER-ROM_KONAMI
                                     37 				ld		a, #4
                                     38 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                     39 				inc		a
                                     40 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                     41 			.endif
                                     42 			.ifeq ROM_MAPPER-ROM_KONAMI_SCC
                                     43 				ld		a, #4
                                     44 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                     45 				inc		a
                                     46 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                     47 			.endif
                                     48 			.ifeq ROM_MAPPER-ROM_NEO8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 29
Hexadecimal [32-Bits]



                                     49 				ld		a, #6
                                     50 				ld		(BANK4_ADDR), a ; Segment 6 in Bank 4
                                     51 				inc		a
                                     52 				ld		(BANK5_ADDR), a ; Segment 7 in Bank 5
                                     53 			.endif
                                     54 			.ifeq ROM_MAPPER-ROM_NEO16
                                     55 				ld		a, #3
                                     56 				ld		(BANK2_ADDR), a ; Segment 3 in Bank 2
                                     57 			.endif
                                     58 			.ifeq ROM_MAPPER-ROM_YAMANOOTO
                                     59 				ld		a, #4
                                     60 				ld		(BANK2_ADDR), a ; Segment 4 in Bank 2
                                     61 				inc		a
                                     62 				ld		(BANK3_ADDR), a ; Segment 5 in Bank 3
                                     63 			.endif
                                     64 			.ifeq ROM_MAPPER-ROM_ASCII16X
                                     65 				ld		a, #2
                                     66 				ld		(BANK1_ADDR), a ; Segment 2 in Bank 1
                                     67 			.endif
                                     68 
                                     69 		; Copy Segment content to RAM
                                     70 			ld		hl, #0x8100 ; Page 2
                                     71 			ld		de, #0x0100 ; Page 0 (after ISR)
                                     72 			ld		bc, #0x3F00 ; 16 KB - 100h
                                     73 			ldir
                                     74 		.endif
                                     75 
                                     76 	.endif
                                     56 
                                     57 	; Initialize globals
    0000003D                         58 	INIT_GLOBALS
                                      1 
    0000003D                          2 	crt0_init_globals:
    0000003D 01 00 00         [10]    3 		ld		bc, #l__INITIALIZER
    00000040 78               [ 4]    4 		ld		a, b
    00000041 B1               [ 4]    5 		or		a, c
    00000042 CA 4D 00         [10]    6 		jp		z, crt0_skip_globals
    00000045 11 00 00         [10]    7 		ld		de, #s__INITIALIZED
    00000048 21 00 00         [10]    8 		ld		hl, #s__INITIALIZER
    0000004B ED B0            [21]    9 		ldir
    0000004D                         10 	crt0_skip_globals:
                                     11 
                                     59 	
    0000004D                         60 crt0_start:
                                     61 	; start main() function
    0000004D FB               [ 4]   62 	ei
    0000004E CD 00 00         [17]   63 	call	_main
    00000051 C7               [11]   64 	rst		0
                                     65 
                                     66 ;------------------------------------------------------------------------------
                                     67 ; Ordering of segments for the linker
                                     68 	.area	_RODATA
                                     69 	.area	_INITIALIZER 
                                     70 	.area	_GSINIT
                                     71 	.area	_GSFINAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80 / R800)                           Page 30
Hexadecimal [32-Bits]



    00000000                         72 _g_LastAddr::
                                     73 
                                     74 ;==============================================================================
                                     75 ; RAM
                                     76 ;==============================================================================
                                     77 	.area	_DATA
                                     78 
    00000000                         79 _g_HeapStartAddress::
    00000000                         80 	.ds		2
                                     81 
                         00000000    82 	.if ROM_RAMISR
                                     83 		ALLOC_ROMINFO
                                     84 	.endif
                                     85 
                                     86 ;------------------------------------------------------------------------------
                                     87 ; Ordering of segments for the linker
                                     88 	.area	_INITIALIZED
                                     89 	.area	_BSEG
                                     90 	.area	_BSS
                                     91 	.area	_HEAP
