                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module nekeys
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Print_DrawChar
                                     12 	.globl _Keyboard_IsKeyPushed
                                     13 	.globl _Keyboard_IsKeyPressed
                                     14 	.globl _Keyboard_Update
                                     15 	.globl _g_SLTSL
                                     16 	.globl _g_GRPACY
                                     17 	.globl _g_GRPACX
                                     18 	.globl _g_LOGOPR
                                     19 	.globl _g_CMASK
                                     20 	.globl _g_CLOC
                                     21 	.globl _g_FNKSTR
                                     22 	.globl _g_ATRBYT
                                     23 	.globl _g_BDRCLR
                                     24 	.globl _g_BAKCLR
                                     25 	.globl _g_FORCLR
                                     26 	.globl _g_CSRX
                                     27 	.globl _g_CSRY
                                     28 	.globl _g_CLIKSW
                                     29 	.globl _g_MLTPAT
                                     30 	.globl _g_MLTATR
                                     31 	.globl _g_MLTCGP
                                     32 	.globl _g_MLTCOL
                                     33 	.globl _g_MLTNAM
                                     34 	.globl _g_GRPPAT
                                     35 	.globl _g_GRPATR
                                     36 	.globl _g_GRPCGP
                                     37 	.globl _g_GRPCOL
                                     38 	.globl _g_GRPNAM
                                     39 	.globl _g_T32PAT
                                     40 	.globl _g_T32ATR
                                     41 	.globl _g_T32CGP
                                     42 	.globl _g_T32COL
                                     43 	.globl _g_T32NAM
                                     44 	.globl _g_TXTPAT
                                     45 	.globl _g_TXTATR
                                     46 	.globl _g_TXTCGP
                                     47 	.globl _g_TXTCOL
                                     48 	.globl _g_TXTNAM
                                     49 	.globl _g_CLMLST
                                     50 	.globl _g_CRTCNT
                                     51 	.globl _g_LINLEN
                                     52 	.globl _g_LINL32
                                     53 	.globl _g_LINL40
                                     54 	.globl _g_BDOS
                                     55 	.globl _g_MASTER
                                     56 	.globl _g_RAMAD3
                                     57 	.globl _g_RAMAD2
                                     58 	.globl _g_RAMAD1
                                     59 	.globl _g_RAMAD0
                                     60 	.globl _g_BREAKV
                                     61 	.globl _g_DISKVE
                                     62 	.globl _g_KANJTABLE
                                     63 	.globl _g_STRSRC
                                     64 	.globl _g_SUBRID
                                     65 	.globl _g_CHAR_16
                                     66 	.globl _g_MSXMID
                                     67 	.globl _g_MSXVER
                                     68 	.globl _g_ROMVersion
                                     69 	.globl _g_BASRVN
                                     70 	.globl _g_VDP_DW
                                     71 	.globl _g_VDP_DR
                                     72 	.globl _g_CGTABL
                                     73 	.globl _g_SVFFFD
                                     74 	.globl _g_RG27SAV
                                     75 	.globl _g_RG26SAV
                                     76 	.globl _g_RG25SAV
                                     77 	.globl _g_SVFFF8
                                     78 	.globl _g_MINROM
                                     79 	.globl _g_RG23SAV
                                     80 	.globl _g_RG22SAV
                                     81 	.globl _g_RG21SAV
                                     82 	.globl _g_RG20SAV
                                     83 	.globl _g_RG19SAV
                                     84 	.globl _g_RG18SAV
                                     85 	.globl _g_RG17SAV
                                     86 	.globl _g_RG16SAV
                                     87 	.globl _g_RG15SAV
                                     88 	.globl _g_RG14SAV
                                     89 	.globl _g_RG13SAV
                                     90 	.globl _g_RG12SAV
                                     91 	.globl _g_RG11SAV
                                     92 	.globl _g_RG10SAV
                                     93 	.globl _g_RG09SAV
                                     94 	.globl _g_RG08SAV
                                     95 	.globl _g_PROCNM
                                     96 	.globl _g_SLTWRK
                                     97 	.globl _g_SLTATR
                                     98 	.globl _g_SLTTBL
                                     99 	.globl _g_EXPTBL
                                    100 	.globl _g_MNROM
                                    101 	.globl _g_DRWANG
                                    102 	.globl _g_DRWSCL
                                    103 	.globl _g_DRWFLG
                                    104 	.globl _g_GYPOS
                                    105 	.globl _g_GXPOS
                                    106 	.globl _g_BRDATR
                                    107 	.globl _g_CASPRV
                                    108 	.globl _g_OLDSCR
                                    109 	.globl _g_SCRMOD
                                    110 	.globl _g_FLBMEM
                                    111 	.globl _g_KANAMD
                                    112 	.globl _g_KANAST
                                    113 	.globl _g_CAPST
                                    114 	.globl _g_CSTYLE
                                    115 	.globl _g_CSRSW
                                    116 	.globl _g_INSFLG
                                    117 	.globl _g_ESCCNT
                                    118 	.globl _g_GRPHED
                                    119 	.globl _g_WINWID
                                    120 	.globl _g_LOWLIM
                                    121 	.globl _g_INTCNT
                                    122 	.globl _g_INTVAL
                                    123 	.globl _g_JIFFY
                                    124 	.globl _g_PADX
                                    125 	.globl _g_PADY
                                    126 	.globl _g_INTFLG
                                    127 	.globl _g_RTYCNT
                                    128 	.globl _g_TRPTBL
                                    129 	.globl _g_HIMEM
                                    130 	.globl _g_BOTTOM
                                    131 	.globl _g_PATWRK
                                    132 	.globl _g_LINWRK
                                    133 	.globl _g_KEYBUF
                                    134 	.globl _g_NEWKEY
                                    135 	.globl _g_OLDKEY
                                    136 	.globl _g_CLIKFL
                                    137 	.globl _g_ONGSBF
                                    138 	.globl _g_FNKFLG
                                    139 	.globl _g_FNKSWI
                                    140 	.globl _g_CODSAV
                                    141 	.globl _g_FSTPOS
                                    142 	.globl _g_LINTTB
                                    143 	.globl _g_BASROM
                                    144 	.globl _g_ENSTOP
                                    145 	.globl _g_VCBC
                                    146 	.globl _g_VCBB
                                    147 	.globl _g_VCBA
                                    148 	.globl _g_PLYCNT
                                    149 	.globl _g_MUSICF
                                    150 	.globl _g_QUEUEN
                                    151 	.globl _g_MCLPTR
                                    152 	.globl _g_MCLLEN
                                    153 	.globl _g_SAVVOL
                                    154 	.globl _g_VOICEN
                                    155 	.globl _g_SAVSP
                                    156 	.globl _g_PRSCNT
                                    157 	.globl _g_LSTMOD
                                    158 	.globl _g_LSTCOM
                                    159 	.globl _g_COMMSK
                                    160 	.globl _g_ESTBLS
                                    161 	.globl _g_FLAGS
                                    162 	.globl _g_ERRORS
                                    163 	.globl _g_DATCNT
                                    164 	.globl _g_DEVNUM
                                    165 	.globl _g_OLDINT
                                    166 	.globl _g_OLDSTT
                                    167 	.globl _g_MEXBIh
                                    168 	.globl _g_RSIQLN
                                    169 	.globl _g_RSFCB
                                    170 	.globl _g_TOCNT
                                    171 	.globl _g_RSTMP
                                    172 	.globl _g_YSAVE
                                    173 	.globl _g_XSAVE
                                    174 	.globl _g_NORUSE
                                    175 	.globl _g_MODE
                                    176 	.globl _g_ROMA
                                    177 	.globl _g_CHRCNT
                                    178 	.globl _g_EXBRSA
                                    179 	.globl _g_AVCSAV
                                    180 	.globl _g_ACPAGE
                                    181 	.globl _g_DPPAGE
                                    182 	.globl _g_RS2IQ
                                    183 	.globl _g_VOICCQ
                                    184 	.globl _g_VOICBQ
                                    185 	.globl _g_VOICAQ
                                    186 	.globl _g_QUEBAK
                                    187 	.globl _g_QUETAB
                                    188 	.globl _g_ASPCT2
                                    189 	.globl _g_ASPCT1
                                    190 	.globl _g_HEADER
                                    191 	.globl _g_HIGH
                                    192 	.globl _g_LOW
                                    193 	.globl _g_CS240
                                    194 	.globl _g_CS120
                                    195 	.globl _g_GETPNT
                                    196 	.globl _g_PUTPNT
                                    197 	.globl _g_REPCNT
                                    198 	.globl _g_SCNCNT
                                    199 	.globl _g_FRCNEW
                                    200 	.globl _g_QUEUES
                                    201 	.globl _g_MINUPD
                                    202 	.globl _g_MAXUPD
                                    203 	.globl _g_TRGFLG
                                    204 	.globl _g_STATFL
                                    205 	.globl _g_RG7SAV
                                    206 	.globl _g_RG6SAV
                                    207 	.globl _g_RG5SAV
                                    208 	.globl _g_RG4SAV
                                    209 	.globl _g_RG3SAV
                                    210 	.globl _g_RG2SAV
                                    211 	.globl _g_RG1SAV
                                    212 	.globl _g_RG0SAV
                                    213 	.globl _g_CNSDFG
                                    214 	.globl _g_USRTAB
                                    215 	.globl _g_CLPRIM
                                    216 	.globl _g_WRPRIM
                                    217 	.globl _g_RDPRIM
                                    218 	.globl _procKeys
                                    219 ;--------------------------------------------------------
                                    220 ; special function registers
                                    221 ;--------------------------------------------------------
                         000000A8   222 _g_PortPrimarySlot	=	0x00a8
                         000000A9   223 _g_PortReadKeyboard	=	0x00a9
                         000000AA   224 _g_PortAccessKeyboard	=	0x00aa
                         000000AB   225 _g_PortControl	=	0x00ab
                         00000098   226 _g_VDP_DataPort	=	0x0098
                         00000099   227 _g_VDP_RegPort	=	0x0099
                         00000099   228 _g_VDP_AddrPort	=	0x0099
                         00000099   229 _g_VDP_StatPort	=	0x0099
                         0000009A   230 _g_VDP_PalPort	=	0x009a
                         0000009B   231 _g_VDP_IRegPort	=	0x009b
                         000000A0   232 _g_PSG_RegPort	=	0x00a0
                         000000A1   233 _g_PSG_DataPort	=	0x00a1
                         000000A2   234 _g_PSG_StatPort	=	0x00a2
                         00000010   235 _g_PSG_Ext_RegPort	=	0x0010
                         00000011   236 _g_PSG_Ext_DataPort	=	0x0011
                         00000012   237 _g_PSG_Ext_StatPort	=	0x0012
                         0000007C   238 _g_MSXMusic_IndexPort	=	0x007c
                         0000007D   239 _g_MSXMusic_DataPort	=	0x007d
                         000000C0   240 _g_MSXAudio_IndexPort	=	0x00c0
                         000000C1   241 _g_MSXAudio_DataPort	=	0x00c1
                         000000C2   242 _g_MSXAudio_IndexPort2	=	0x00c2
                         000000C3   243 _g_MSXAudio_DataPort2	=	0x00c3
                         000000B4   244 _g_RTC_AddrPort	=	0x00b4
                         000000B5   245 _g_RTC_DataPort	=	0x00b5
                                    246 ;--------------------------------------------------------
                                    247 ; ram data
                                    248 ;--------------------------------------------------------
                                    249 	.area _DATA
                         0000F3AE   250 _g_LINL40	=	0xf3ae
                         0000F3AF   251 _g_LINL32	=	0xf3af
                         0000F3B0   252 _g_LINLEN	=	0xf3b0
                         0000F3B1   253 _g_CRTCNT	=	0xf3b1
                         0000F3B2   254 _g_CLMLST	=	0xf3b2
                         0000F3B3   255 _g_TXTNAM	=	0xf3b3
                         0000F3B5   256 _g_TXTCOL	=	0xf3b5
                         0000F3B7   257 _g_TXTCGP	=	0xf3b7
                         0000F3B9   258 _g_TXTATR	=	0xf3b9
                         0000F3BB   259 _g_TXTPAT	=	0xf3bb
                         0000F3BD   260 _g_T32NAM	=	0xf3bd
                         0000F3BF   261 _g_T32COL	=	0xf3bf
                         0000F3C1   262 _g_T32CGP	=	0xf3c1
                         0000F3C3   263 _g_T32ATR	=	0xf3c3
                         0000F3C5   264 _g_T32PAT	=	0xf3c5
                         0000F3C7   265 _g_GRPNAM	=	0xf3c7
                         0000F3C9   266 _g_GRPCOL	=	0xf3c9
                         0000F3CB   267 _g_GRPCGP	=	0xf3cb
                         0000F3CD   268 _g_GRPATR	=	0xf3cd
                         0000F3CF   269 _g_GRPPAT	=	0xf3cf
                         0000F3D1   270 _g_MLTNAM	=	0xf3d1
                         0000F3D3   271 _g_MLTCOL	=	0xf3d3
                         0000F3D5   272 _g_MLTCGP	=	0xf3d5
                         0000F3D7   273 _g_MLTATR	=	0xf3d7
                         0000F3D9   274 _g_MLTPAT	=	0xf3d9
                         0000F3DB   275 _g_CLIKSW	=	0xf3db
                         0000F3DC   276 _g_CSRY	=	0xf3dc
                         0000F3DD   277 _g_CSRX	=	0xf3dd
                         0000F3E9   278 _g_FORCLR	=	0xf3e9
                         0000F3EA   279 _g_BAKCLR	=	0xf3ea
                         0000F3EB   280 _g_BDRCLR	=	0xf3eb
                         0000F3F2   281 _g_ATRBYT	=	0xf3f2
                         0000F87F   282 _g_FNKSTR	=	0xf87f
                         0000F92A   283 _g_CLOC	=	0xf92a
                         0000F92C   284 _g_CMASK	=	0xf92c
                         0000FB02   285 _g_LOGOPR	=	0xfb02
                         0000FCB7   286 _g_GRPACX	=	0xfcb7
                         0000FCB9   287 _g_GRPACY	=	0xfcb9
                         0000FFFF   288 _g_SLTSL	=	0xffff
                                    289 ;--------------------------------------------------------
                                    290 ; ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area _INITIALIZED
                                    293 ;--------------------------------------------------------
                                    294 ; absolute external ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area _DABS (ABS)
                                    297 ;--------------------------------------------------------
                                    298 ; global & static initialisations
                                    299 ;--------------------------------------------------------
                                    300 	.area _HOME
                                    301 	.area _GSINIT
                                    302 	.area _GSFINAL
                                    303 	.area _GSINIT
                                    304 ;--------------------------------------------------------
                                    305 ; Home
                                    306 ;--------------------------------------------------------
                                    307 	.area _HOME
                                    308 	.area _HOME
                                    309 ;--------------------------------------------------------
                                    310 ; code
                                    311 ;--------------------------------------------------------
                                    312 	.area _CODE
                                    313 ;./nekeys.c:5: void procKeys()
                                    314 ;	---------------------------------
                                    315 ; Function procKeys
                                    316 ; ---------------------------------
    00000000                        317 _procKeys::
    00000000 3B               [ 6]  318 	dec	sp
                                    319 ;./nekeys.c:7: c8 curchar = 0;
                                    320 ;./nekeys.c:8: bool capslock = false;
    00000001 01 00 00         [10]  321 	ld	bc, #0x0
                                    322 ;./nekeys.c:10: while (1)
    00000004                        323 00195$:
                                    324 ;./nekeys.c:12: Keyboard_Update();
    00000004 C5               [11]  325 	push	bc
    00000005 CDr00r00         [17]  326 	call	_Keyboard_Update
    00000008 3E 36            [ 7]  327 	ld	a, #0x36
    0000000A CDr00r00         [17]  328 	call	_Keyboard_IsKeyPushed
    0000000D C1               [10]  329 	pop	bc
    0000000E B7               [ 4]  330 	or	a, a
    0000000F 28 0E            [12]  331 	jr	Z, 00102$
                                    332 ;./nekeys.c:14: capslock = (capslock) ? false : true;
    00000011 78               [ 4]  333 	ld	a, b
    00000012 B7               [ 4]  334 	or	a, a
    00000013 28 06            [12]  335 	jr	Z, 00199$
    00000015 11 00 00         [10]  336 	ld	de, #0x0000
    00000018 C3r1Er00         [10]  337 	jp	00200$
    0000001B                        338 00199$:
    0000001B 11 01 00         [10]  339 	ld	de, #0x0001
    0000001E                        340 00200$:
    0000001E 43               [ 4]  341 	ld	b, e
    0000001F                        342 00102$:
                                    343 ;./nekeys.c:16: capsshift = false;
    0000001F FD 21 00 00      [14]  344 	ld	iy, #0
    00000023 FD 39            [15]  345 	add	iy, sp
    00000025 FD 36 00 00      [19]  346 	ld	0 (iy), #0x00
                                    347 ;./nekeys.c:17: if(Keyboard_IsKeyPressed(KEY_SHIFT))
    00000029 C5               [11]  348 	push	bc
    0000002A 3E 06            [ 7]  349 	ld	a, #0x06
    0000002C CDr00r00         [17]  350 	call	_Keyboard_IsKeyPressed
    0000002F C1               [10]  351 	pop	bc
    00000030 B7               [ 4]  352 	or	a, a
    00000031 28 0A            [12]  353 	jr	Z, 00104$
                                    354 ;./nekeys.c:18: capsshift = true;
    00000033 FD 21 00 00      [14]  355 	ld	iy, #0
    00000037 FD 39            [15]  356 	add	iy, sp
    00000039 FD 36 00 01      [19]  357 	ld	0 (iy), #0x01
    0000003D                        358 00104$:
                                    359 ;./nekeys.c:20: if(Keyboard_IsKeyPushed(KEY_SPACE))
    0000003D C5               [11]  360 	push	bc
    0000003E 3E 08            [ 7]  361 	ld	a, #0x08
    00000040 CDr00r00         [17]  362 	call	_Keyboard_IsKeyPushed
    00000043 C1               [10]  363 	pop	bc
    00000044 B7               [ 4]  364 	or	a, a
    00000045 28 02            [12]  365 	jr	Z, 00106$
                                    366 ;./nekeys.c:21: curchar = ' ';
    00000047 0E 20            [ 7]  367 	ld	c, #0x20
    00000049                        368 00106$:
                                    369 ;./nekeys.c:23: if(Keyboard_IsKeyPushed(KEY_A))
    00000049 C5               [11]  370 	push	bc
    0000004A 3E 62            [ 7]  371 	ld	a, #0x62
    0000004C CDr00r00         [17]  372 	call	_Keyboard_IsKeyPushed
    0000004F C1               [10]  373 	pop	bc
    00000050 B7               [ 4]  374 	or	a, a
    00000051 28 02            [12]  375 	jr	Z, 00108$
                                    376 ;./nekeys.c:24: curchar = 'A';
    00000053 0E 41            [ 7]  377 	ld	c, #0x41
    00000055                        378 00108$:
                                    379 ;./nekeys.c:25: if(Keyboard_IsKeyPushed(KEY_B))
    00000055 C5               [11]  380 	push	bc
    00000056 3E 72            [ 7]  381 	ld	a, #0x72
    00000058 CDr00r00         [17]  382 	call	_Keyboard_IsKeyPushed
    0000005B C1               [10]  383 	pop	bc
    0000005C B7               [ 4]  384 	or	a, a
    0000005D 28 02            [12]  385 	jr	Z, 00110$
                                    386 ;./nekeys.c:26: curchar = 'B';
    0000005F 0E 42            [ 7]  387 	ld	c, #0x42
    00000061                        388 00110$:
                                    389 ;./nekeys.c:27: if(Keyboard_IsKeyPushed(KEY_C))
    00000061 C5               [11]  390 	push	bc
    00000062 3E 03            [ 7]  391 	ld	a, #0x03
    00000064 CDr00r00         [17]  392 	call	_Keyboard_IsKeyPushed
    00000067 C1               [10]  393 	pop	bc
    00000068 B7               [ 4]  394 	or	a, a
    00000069 28 02            [12]  395 	jr	Z, 00112$
                                    396 ;./nekeys.c:28: curchar = 'C';
    0000006B 0E 43            [ 7]  397 	ld	c, #0x43
    0000006D                        398 00112$:
                                    399 ;./nekeys.c:29: if(Keyboard_IsKeyPushed(KEY_D))
    0000006D C5               [11]  400 	push	bc
    0000006E 3E 13            [ 7]  401 	ld	a, #0x13
    00000070 CDr00r00         [17]  402 	call	_Keyboard_IsKeyPushed
    00000073 C1               [10]  403 	pop	bc
    00000074 B7               [ 4]  404 	or	a, a
    00000075 28 02            [12]  405 	jr	Z, 00114$
                                    406 ;./nekeys.c:30: curchar = 'D';
    00000077 0E 44            [ 7]  407 	ld	c, #0x44
    00000079                        408 00114$:
                                    409 ;./nekeys.c:31: if(Keyboard_IsKeyPushed(KEY_E))
    00000079 C5               [11]  410 	push	bc
    0000007A 3E 23            [ 7]  411 	ld	a, #0x23
    0000007C CDr00r00         [17]  412 	call	_Keyboard_IsKeyPushed
    0000007F C1               [10]  413 	pop	bc
    00000080 B7               [ 4]  414 	or	a, a
    00000081 28 02            [12]  415 	jr	Z, 00116$
                                    416 ;./nekeys.c:32: curchar = 'E';
    00000083 0E 45            [ 7]  417 	ld	c, #0x45
    00000085                        418 00116$:
                                    419 ;./nekeys.c:33: if(Keyboard_IsKeyPushed(KEY_F))
    00000085 C5               [11]  420 	push	bc
    00000086 3E 33            [ 7]  421 	ld	a, #0x33
    00000088 CDr00r00         [17]  422 	call	_Keyboard_IsKeyPushed
    0000008B C1               [10]  423 	pop	bc
    0000008C B7               [ 4]  424 	or	a, a
    0000008D 28 02            [12]  425 	jr	Z, 00118$
                                    426 ;./nekeys.c:34: curchar = 'F';
    0000008F 0E 46            [ 7]  427 	ld	c, #0x46
    00000091                        428 00118$:
                                    429 ;./nekeys.c:35: if(Keyboard_IsKeyPushed(KEY_G))
    00000091 C5               [11]  430 	push	bc
    00000092 3E 43            [ 7]  431 	ld	a, #0x43
    00000094 CDr00r00         [17]  432 	call	_Keyboard_IsKeyPushed
    00000097 C1               [10]  433 	pop	bc
    00000098 B7               [ 4]  434 	or	a, a
    00000099 28 02            [12]  435 	jr	Z, 00120$
                                    436 ;./nekeys.c:36: curchar = 'G';
    0000009B 0E 47            [ 7]  437 	ld	c, #0x47
    0000009D                        438 00120$:
                                    439 ;./nekeys.c:37: if(Keyboard_IsKeyPushed(KEY_H))
    0000009D C5               [11]  440 	push	bc
    0000009E 3E 53            [ 7]  441 	ld	a, #0x53
    000000A0 CDr00r00         [17]  442 	call	_Keyboard_IsKeyPushed
    000000A3 C1               [10]  443 	pop	bc
    000000A4 B7               [ 4]  444 	or	a, a
    000000A5 28 02            [12]  445 	jr	Z, 00122$
                                    446 ;./nekeys.c:38: curchar = 'H';
    000000A7 0E 48            [ 7]  447 	ld	c, #0x48
    000000A9                        448 00122$:
                                    449 ;./nekeys.c:39: if(Keyboard_IsKeyPushed(KEY_I))
    000000A9 C5               [11]  450 	push	bc
    000000AA 3E 63            [ 7]  451 	ld	a, #0x63
    000000AC CDr00r00         [17]  452 	call	_Keyboard_IsKeyPushed
    000000AF C1               [10]  453 	pop	bc
    000000B0 B7               [ 4]  454 	or	a, a
    000000B1 28 02            [12]  455 	jr	Z, 00124$
                                    456 ;./nekeys.c:40: curchar = 'I';
    000000B3 0E 49            [ 7]  457 	ld	c, #0x49
    000000B5                        458 00124$:
                                    459 ;./nekeys.c:41: if(Keyboard_IsKeyPushed(KEY_J))
    000000B5 C5               [11]  460 	push	bc
    000000B6 3E 73            [ 7]  461 	ld	a, #0x73
    000000B8 CDr00r00         [17]  462 	call	_Keyboard_IsKeyPushed
    000000BB C1               [10]  463 	pop	bc
    000000BC B7               [ 4]  464 	or	a, a
    000000BD 28 02            [12]  465 	jr	Z, 00126$
                                    466 ;./nekeys.c:42: curchar = 'J';
    000000BF 0E 4A            [ 7]  467 	ld	c, #0x4a
    000000C1                        468 00126$:
                                    469 ;./nekeys.c:43: if(Keyboard_IsKeyPushed(KEY_K))
    000000C1 C5               [11]  470 	push	bc
    000000C2 3E 04            [ 7]  471 	ld	a, #0x04
    000000C4 CDr00r00         [17]  472 	call	_Keyboard_IsKeyPushed
    000000C7 C1               [10]  473 	pop	bc
    000000C8 B7               [ 4]  474 	or	a, a
    000000C9 28 02            [12]  475 	jr	Z, 00128$
                                    476 ;./nekeys.c:44: curchar = 'K';
    000000CB 0E 4B            [ 7]  477 	ld	c, #0x4b
    000000CD                        478 00128$:
                                    479 ;./nekeys.c:45: if(Keyboard_IsKeyPushed(KEY_L))
    000000CD C5               [11]  480 	push	bc
    000000CE 3E 14            [ 7]  481 	ld	a, #0x14
    000000D0 CDr00r00         [17]  482 	call	_Keyboard_IsKeyPushed
    000000D3 C1               [10]  483 	pop	bc
    000000D4 B7               [ 4]  484 	or	a, a
    000000D5 28 02            [12]  485 	jr	Z, 00130$
                                    486 ;./nekeys.c:46: curchar = 'L';
    000000D7 0E 4C            [ 7]  487 	ld	c, #0x4c
    000000D9                        488 00130$:
                                    489 ;./nekeys.c:47: if(Keyboard_IsKeyPushed(KEY_M))
    000000D9 C5               [11]  490 	push	bc
    000000DA 3E 24            [ 7]  491 	ld	a, #0x24
    000000DC CDr00r00         [17]  492 	call	_Keyboard_IsKeyPushed
    000000DF C1               [10]  493 	pop	bc
    000000E0 B7               [ 4]  494 	or	a, a
    000000E1 28 02            [12]  495 	jr	Z, 00132$
                                    496 ;./nekeys.c:48: curchar = 'M';
    000000E3 0E 4D            [ 7]  497 	ld	c, #0x4d
    000000E5                        498 00132$:
                                    499 ;./nekeys.c:49: if(Keyboard_IsKeyPushed(KEY_N))
    000000E5 C5               [11]  500 	push	bc
    000000E6 3E 34            [ 7]  501 	ld	a, #0x34
    000000E8 CDr00r00         [17]  502 	call	_Keyboard_IsKeyPushed
    000000EB C1               [10]  503 	pop	bc
    000000EC B7               [ 4]  504 	or	a, a
    000000ED 28 02            [12]  505 	jr	Z, 00134$
                                    506 ;./nekeys.c:50: curchar = 'N';
    000000EF 0E 4E            [ 7]  507 	ld	c, #0x4e
    000000F1                        508 00134$:
                                    509 ;./nekeys.c:51: if(Keyboard_IsKeyPushed(KEY_O))
    000000F1 C5               [11]  510 	push	bc
    000000F2 3E 44            [ 7]  511 	ld	a, #0x44
    000000F4 CDr00r00         [17]  512 	call	_Keyboard_IsKeyPushed
    000000F7 C1               [10]  513 	pop	bc
    000000F8 B7               [ 4]  514 	or	a, a
    000000F9 28 02            [12]  515 	jr	Z, 00136$
                                    516 ;./nekeys.c:52: curchar = 'O';
    000000FB 0E 4F            [ 7]  517 	ld	c, #0x4f
    000000FD                        518 00136$:
                                    519 ;./nekeys.c:53: if(Keyboard_IsKeyPushed(KEY_P))
    000000FD C5               [11]  520 	push	bc
    000000FE 3E 54            [ 7]  521 	ld	a, #0x54
    00000100 CDr00r00         [17]  522 	call	_Keyboard_IsKeyPushed
    00000103 C1               [10]  523 	pop	bc
    00000104 B7               [ 4]  524 	or	a, a
    00000105 28 02            [12]  525 	jr	Z, 00138$
                                    526 ;./nekeys.c:54: curchar = 'P';
    00000107 0E 50            [ 7]  527 	ld	c, #0x50
    00000109                        528 00138$:
                                    529 ;./nekeys.c:55: if(Keyboard_IsKeyPushed(KEY_Q))
    00000109 C5               [11]  530 	push	bc
    0000010A 3E 64            [ 7]  531 	ld	a, #0x64
    0000010C CDr00r00         [17]  532 	call	_Keyboard_IsKeyPushed
    0000010F C1               [10]  533 	pop	bc
    00000110 B7               [ 4]  534 	or	a, a
    00000111 28 02            [12]  535 	jr	Z, 00140$
                                    536 ;./nekeys.c:56: curchar = 'Q';
    00000113 0E 51            [ 7]  537 	ld	c, #0x51
    00000115                        538 00140$:
                                    539 ;./nekeys.c:57: if(Keyboard_IsKeyPushed(KEY_R))
    00000115 C5               [11]  540 	push	bc
    00000116 3E 74            [ 7]  541 	ld	a, #0x74
    00000118 CDr00r00         [17]  542 	call	_Keyboard_IsKeyPushed
    0000011B C1               [10]  543 	pop	bc
    0000011C B7               [ 4]  544 	or	a, a
    0000011D 28 02            [12]  545 	jr	Z, 00142$
                                    546 ;./nekeys.c:58: curchar = 'R';
    0000011F 0E 52            [ 7]  547 	ld	c, #0x52
    00000121                        548 00142$:
                                    549 ;./nekeys.c:59: if(Keyboard_IsKeyPushed(KEY_S))
    00000121 C5               [11]  550 	push	bc
    00000122 3E 05            [ 7]  551 	ld	a, #0x05
    00000124 CDr00r00         [17]  552 	call	_Keyboard_IsKeyPushed
    00000127 C1               [10]  553 	pop	bc
    00000128 B7               [ 4]  554 	or	a, a
    00000129 28 02            [12]  555 	jr	Z, 00144$
                                    556 ;./nekeys.c:60: curchar = 'S';
    0000012B 0E 53            [ 7]  557 	ld	c, #0x53
    0000012D                        558 00144$:
                                    559 ;./nekeys.c:61: if(Keyboard_IsKeyPushed(KEY_T))
    0000012D C5               [11]  560 	push	bc
    0000012E 3E 15            [ 7]  561 	ld	a, #0x15
    00000130 CDr00r00         [17]  562 	call	_Keyboard_IsKeyPushed
    00000133 C1               [10]  563 	pop	bc
    00000134 B7               [ 4]  564 	or	a, a
    00000135 28 02            [12]  565 	jr	Z, 00146$
                                    566 ;./nekeys.c:62: curchar = 'T';
    00000137 0E 54            [ 7]  567 	ld	c, #0x54
    00000139                        568 00146$:
                                    569 ;./nekeys.c:63: if(Keyboard_IsKeyPushed(KEY_U))
    00000139 C5               [11]  570 	push	bc
    0000013A 3E 25            [ 7]  571 	ld	a, #0x25
    0000013C CDr00r00         [17]  572 	call	_Keyboard_IsKeyPushed
    0000013F C1               [10]  573 	pop	bc
    00000140 B7               [ 4]  574 	or	a, a
    00000141 28 02            [12]  575 	jr	Z, 00148$
                                    576 ;./nekeys.c:64: curchar = 'U';
    00000143 0E 55            [ 7]  577 	ld	c, #0x55
    00000145                        578 00148$:
                                    579 ;./nekeys.c:65: if(Keyboard_IsKeyPushed(KEY_V))
    00000145 C5               [11]  580 	push	bc
    00000146 3E 35            [ 7]  581 	ld	a, #0x35
    00000148 CDr00r00         [17]  582 	call	_Keyboard_IsKeyPushed
    0000014B C1               [10]  583 	pop	bc
    0000014C B7               [ 4]  584 	or	a, a
    0000014D 28 02            [12]  585 	jr	Z, 00150$
                                    586 ;./nekeys.c:66: curchar = 'V';
    0000014F 0E 56            [ 7]  587 	ld	c, #0x56
    00000151                        588 00150$:
                                    589 ;./nekeys.c:67: if(Keyboard_IsKeyPushed(KEY_W))
    00000151 C5               [11]  590 	push	bc
    00000152 3E 45            [ 7]  591 	ld	a, #0x45
    00000154 CDr00r00         [17]  592 	call	_Keyboard_IsKeyPushed
    00000157 C1               [10]  593 	pop	bc
    00000158 B7               [ 4]  594 	or	a, a
    00000159 28 02            [12]  595 	jr	Z, 00152$
                                    596 ;./nekeys.c:68: curchar = 'W';
    0000015B 0E 57            [ 7]  597 	ld	c, #0x57
    0000015D                        598 00152$:
                                    599 ;./nekeys.c:69: if(Keyboard_IsKeyPushed(KEY_X))
    0000015D C5               [11]  600 	push	bc
    0000015E 3E 55            [ 7]  601 	ld	a, #0x55
    00000160 CDr00r00         [17]  602 	call	_Keyboard_IsKeyPushed
    00000163 C1               [10]  603 	pop	bc
    00000164 B7               [ 4]  604 	or	a, a
    00000165 28 02            [12]  605 	jr	Z, 00154$
                                    606 ;./nekeys.c:70: curchar = 'X';
    00000167 0E 58            [ 7]  607 	ld	c, #0x58
    00000169                        608 00154$:
                                    609 ;./nekeys.c:71: if(Keyboard_IsKeyPushed(KEY_Y))
    00000169 C5               [11]  610 	push	bc
    0000016A 3E 65            [ 7]  611 	ld	a, #0x65
    0000016C CDr00r00         [17]  612 	call	_Keyboard_IsKeyPushed
    0000016F C1               [10]  613 	pop	bc
    00000170 B7               [ 4]  614 	or	a, a
    00000171 28 02            [12]  615 	jr	Z, 00156$
                                    616 ;./nekeys.c:72: curchar = 'Y';
    00000173 0E 59            [ 7]  617 	ld	c, #0x59
    00000175                        618 00156$:
                                    619 ;./nekeys.c:73: if(Keyboard_IsKeyPushed(KEY_Z))
    00000175 C5               [11]  620 	push	bc
    00000176 3E 75            [ 7]  621 	ld	a, #0x75
    00000178 CDr00r00         [17]  622 	call	_Keyboard_IsKeyPushed
    0000017B C1               [10]  623 	pop	bc
    0000017C B7               [ 4]  624 	or	a, a
    0000017D 28 02            [12]  625 	jr	Z, 00158$
                                    626 ;./nekeys.c:74: curchar = 'Z';
    0000017F 0E 5A            [ 7]  627 	ld	c, #0x5a
    00000181                        628 00158$:
                                    629 ;./nekeys.c:76: if(Keyboard_IsKeyPushed(KEY_0))
    00000181 C5               [11]  630 	push	bc
    00000182 AF               [ 4]  631 	xor	a, a
    00000183 CDr00r00         [17]  632 	call	_Keyboard_IsKeyPushed
    00000186 C1               [10]  633 	pop	bc
    00000187 B7               [ 4]  634 	or	a, a
    00000188 28 02            [12]  635 	jr	Z, 00160$
                                    636 ;./nekeys.c:77: curchar = '0';
    0000018A 0E 30            [ 7]  637 	ld	c, #0x30
    0000018C                        638 00160$:
                                    639 ;./nekeys.c:78: if(Keyboard_IsKeyPushed(KEY_1))
    0000018C C5               [11]  640 	push	bc
    0000018D 3E 10            [ 7]  641 	ld	a, #0x10
    0000018F CDr00r00         [17]  642 	call	_Keyboard_IsKeyPushed
    00000192 C1               [10]  643 	pop	bc
    00000193 B7               [ 4]  644 	or	a, a
    00000194 28 02            [12]  645 	jr	Z, 00162$
                                    646 ;./nekeys.c:79: curchar = '1';
    00000196 0E 31            [ 7]  647 	ld	c, #0x31
    00000198                        648 00162$:
                                    649 ;./nekeys.c:80: if(Keyboard_IsKeyPushed(KEY_2))
    00000198 C5               [11]  650 	push	bc
    00000199 3E 20            [ 7]  651 	ld	a, #0x20
    0000019B CDr00r00         [17]  652 	call	_Keyboard_IsKeyPushed
    0000019E C1               [10]  653 	pop	bc
    0000019F B7               [ 4]  654 	or	a, a
    000001A0 28 02            [12]  655 	jr	Z, 00164$
                                    656 ;./nekeys.c:81: curchar = '2';
    000001A2 0E 32            [ 7]  657 	ld	c, #0x32
    000001A4                        658 00164$:
                                    659 ;./nekeys.c:82: if(Keyboard_IsKeyPushed(KEY_3))
    000001A4 C5               [11]  660 	push	bc
    000001A5 3E 30            [ 7]  661 	ld	a, #0x30
    000001A7 CDr00r00         [17]  662 	call	_Keyboard_IsKeyPushed
    000001AA C1               [10]  663 	pop	bc
    000001AB B7               [ 4]  664 	or	a, a
    000001AC 28 02            [12]  665 	jr	Z, 00166$
                                    666 ;./nekeys.c:83: curchar = '3';
    000001AE 0E 33            [ 7]  667 	ld	c, #0x33
    000001B0                        668 00166$:
                                    669 ;./nekeys.c:84: if(Keyboard_IsKeyPushed(KEY_4))
    000001B0 C5               [11]  670 	push	bc
    000001B1 3E 40            [ 7]  671 	ld	a, #0x40
    000001B3 CDr00r00         [17]  672 	call	_Keyboard_IsKeyPushed
    000001B6 C1               [10]  673 	pop	bc
    000001B7 B7               [ 4]  674 	or	a, a
    000001B8 28 02            [12]  675 	jr	Z, 00168$
                                    676 ;./nekeys.c:85: curchar = '4';
    000001BA 0E 34            [ 7]  677 	ld	c, #0x34
    000001BC                        678 00168$:
                                    679 ;./nekeys.c:86: if(Keyboard_IsKeyPushed(KEY_5))
    000001BC C5               [11]  680 	push	bc
    000001BD 3E 50            [ 7]  681 	ld	a, #0x50
    000001BF CDr00r00         [17]  682 	call	_Keyboard_IsKeyPushed
    000001C2 C1               [10]  683 	pop	bc
    000001C3 B7               [ 4]  684 	or	a, a
    000001C4 28 02            [12]  685 	jr	Z, 00170$
                                    686 ;./nekeys.c:87: curchar = '5';
    000001C6 0E 35            [ 7]  687 	ld	c, #0x35
    000001C8                        688 00170$:
                                    689 ;./nekeys.c:88: if(Keyboard_IsKeyPushed(KEY_6))
    000001C8 C5               [11]  690 	push	bc
    000001C9 3E 60            [ 7]  691 	ld	a, #0x60
    000001CB CDr00r00         [17]  692 	call	_Keyboard_IsKeyPushed
    000001CE C1               [10]  693 	pop	bc
    000001CF B7               [ 4]  694 	or	a, a
    000001D0 28 02            [12]  695 	jr	Z, 00172$
                                    696 ;./nekeys.c:89: curchar = '6';
    000001D2 0E 36            [ 7]  697 	ld	c, #0x36
    000001D4                        698 00172$:
                                    699 ;./nekeys.c:90: if(Keyboard_IsKeyPushed(KEY_7))
    000001D4 C5               [11]  700 	push	bc
    000001D5 3E 70            [ 7]  701 	ld	a, #0x70
    000001D7 CDr00r00         [17]  702 	call	_Keyboard_IsKeyPushed
    000001DA C1               [10]  703 	pop	bc
    000001DB B7               [ 4]  704 	or	a, a
    000001DC 28 02            [12]  705 	jr	Z, 00174$
                                    706 ;./nekeys.c:91: curchar = '7';
    000001DE 0E 37            [ 7]  707 	ld	c, #0x37
    000001E0                        708 00174$:
                                    709 ;./nekeys.c:92: if(Keyboard_IsKeyPushed(KEY_8))
    000001E0 C5               [11]  710 	push	bc
    000001E1 3E 01            [ 7]  711 	ld	a, #0x01
    000001E3 CDr00r00         [17]  712 	call	_Keyboard_IsKeyPushed
    000001E6 C1               [10]  713 	pop	bc
    000001E7 B7               [ 4]  714 	or	a, a
    000001E8 28 02            [12]  715 	jr	Z, 00176$
                                    716 ;./nekeys.c:93: curchar = '8';
    000001EA 0E 38            [ 7]  717 	ld	c, #0x38
    000001EC                        718 00176$:
                                    719 ;./nekeys.c:94: if(Keyboard_IsKeyPushed(KEY_9))
    000001EC C5               [11]  720 	push	bc
    000001ED 3E 11            [ 7]  721 	ld	a, #0x11
    000001EF CDr00r00         [17]  722 	call	_Keyboard_IsKeyPushed
    000001F2 C1               [10]  723 	pop	bc
    000001F3 B7               [ 4]  724 	or	a, a
    000001F4 28 02            [12]  725 	jr	Z, 00178$
                                    726 ;./nekeys.c:95: curchar = '9';
    000001F6 0E 39            [ 7]  727 	ld	c, #0x39
    000001F8                        728 00178$:
                                    729 ;./nekeys.c:97: if(Keyboard_IsKeyPushed(KEY_ESC))
    000001F8 C5               [11]  730 	push	bc
    000001F9 3E 27            [ 7]  731 	ld	a, #0x27
    000001FB CDr00r00         [17]  732 	call	_Keyboard_IsKeyPushed
    000001FE C1               [10]  733 	pop	bc
    000001FF B7               [ 4]  734 	or	a, a
    00000200 20 44            [12]  735 	jr	NZ, 00197$
                                    736 ;./nekeys.c:100: if((curchar >= ' ') && (curchar <= 'Z'))
    00000202 79               [ 4]  737 	ld	a, c
    00000203 D6 20            [ 7]  738 	sub	a, #0x20
    00000205 DAr04r00         [10]  739 	jp	C, 00195$
    00000208 3E 5A            [ 7]  740 	ld	a, #0x5a
    0000020A 91               [ 4]  741 	sub	a, c
    0000020B DAr04r00         [10]  742 	jp	C, 00195$
                                    743 ;./nekeys.c:102: if(curchar != ' ')
    0000020E 79               [ 4]  744 	ld	a, c
    0000020F D6 20            [ 7]  745 	sub	a, #0x20
    00000211 28 08            [12]  746 	jr	Z, 00184$
                                    747 ;./nekeys.c:103: if(!capslock)
    00000213 78               [ 4]  748 	ld	a, b
    00000214 B7               [ 4]  749 	or	a, a
    00000215 20 04            [12]  750 	jr	NZ, 00184$
                                    751 ;./nekeys.c:104: curchar = curchar - 'A' + 'a';
    00000217 79               [ 4]  752 	ld	a, c
    00000218 C6 20            [ 7]  753 	add	a, #0x20
    0000021A 4F               [ 4]  754 	ld	c, a
    0000021B                        755 00184$:
                                    756 ;./nekeys.c:105: if(capsshift && capslock)
    0000021B 21 00 00         [10]  757 	ld	hl, #0
    0000021E 39               [11]  758 	add	hl, sp
    0000021F 7E               [ 7]  759 	ld	a, (hl)
    00000220 B7               [ 4]  760 	or	a, a
    00000221 28 08            [12]  761 	jr	Z, 00186$
    00000223 78               [ 4]  762 	ld	a, b
    00000224 B7               [ 4]  763 	or	a, a
    00000225 28 04            [12]  764 	jr	Z, 00186$
                                    765 ;./nekeys.c:106: curchar = curchar - 'A' + 'a';
    00000227 79               [ 4]  766 	ld	a, c
    00000228 C6 20            [ 7]  767 	add	a, #0x20
    0000022A 4F               [ 4]  768 	ld	c, a
    0000022B                        769 00186$:
                                    770 ;./nekeys.c:107: if(capsshift && !capslock)
    0000022B 21 00 00         [10]  771 	ld	hl, #0
    0000022E 39               [11]  772 	add	hl, sp
    0000022F 7E               [ 7]  773 	ld	a, (hl)
    00000230 B7               [ 4]  774 	or	a, a
    00000231 28 08            [12]  775 	jr	Z, 00189$
    00000233 78               [ 4]  776 	ld	a, b
    00000234 B7               [ 4]  777 	or	a, a
    00000235 20 04            [12]  778 	jr	NZ, 00189$
                                    779 ;./nekeys.c:108: curchar = curchar - 'a' + 'A';
    00000237 79               [ 4]  780 	ld	a, c
    00000238 C6 E0            [ 7]  781 	add	a, #0xe0
    0000023A 4F               [ 4]  782 	ld	c, a
    0000023B                        783 00189$:
                                    784 ;./nekeys.c:110: Print_DrawChar(curchar);
    0000023B C5               [11]  785 	push	bc
    0000023C 79               [ 4]  786 	ld	a, c
    0000023D CDr00r00         [17]  787 	call	_Print_DrawChar
    00000240 C1               [10]  788 	pop	bc
                                    789 ;./nekeys.c:111: curchar = 0;
    00000241 0E 00            [ 7]  790 	ld	c, #0x00
    00000243 C3r04r00         [10]  791 	jp	00195$
    00000246                        792 00197$:
                                    793 ;./nekeys.c:114: }
    00000246 33               [ 6]  794 	inc	sp
    00000247 C9               [10]  795 	ret
                         0000F380   796 _g_RDPRIM	=	0xf380
                         0000F385   797 _g_WRPRIM	=	0xf385
                         0000F38C   798 _g_CLPRIM	=	0xf38c
                         0000F39A   799 _g_USRTAB	=	0xf39a
                         0000F3DE   800 _g_CNSDFG	=	0xf3de
                         0000F3DF   801 _g_RG0SAV	=	0xf3df
                         0000F3E0   802 _g_RG1SAV	=	0xf3e0
                         0000F3E1   803 _g_RG2SAV	=	0xf3e1
                         0000F3E2   804 _g_RG3SAV	=	0xf3e2
                         0000F3E3   805 _g_RG4SAV	=	0xf3e3
                         0000F3E4   806 _g_RG5SAV	=	0xf3e4
                         0000F3E5   807 _g_RG6SAV	=	0xf3e5
                         0000F3E6   808 _g_RG7SAV	=	0xf3e6
                         0000F3E7   809 _g_STATFL	=	0xf3e7
                         0000F3E8   810 _g_TRGFLG	=	0xf3e8
                         0000F3EC   811 _g_MAXUPD	=	0xf3ec
                         0000F3EF   812 _g_MINUPD	=	0xf3ef
                         0000F3F3   813 _g_QUEUES	=	0xf3f3
                         0000F3F5   814 _g_FRCNEW	=	0xf3f5
                         0000F3F6   815 _g_SCNCNT	=	0xf3f6
                         0000F3F7   816 _g_REPCNT	=	0xf3f7
                         0000F3F8   817 _g_PUTPNT	=	0xf3f8
                         0000F3FA   818 _g_GETPNT	=	0xf3fa
                         0000F3FC   819 _g_CS120	=	0xf3fc
                         0000F401   820 _g_CS240	=	0xf401
                         0000F406   821 _g_LOW	=	0xf406
                         0000F408   822 _g_HIGH	=	0xf408
                         0000F40A   823 _g_HEADER	=	0xf40a
                         0000F40B   824 _g_ASPCT1	=	0xf40b
                         0000F40D   825 _g_ASPCT2	=	0xf40d
                         0000F959   826 _g_QUETAB	=	0xf959
                         0000F971   827 _g_QUEBAK	=	0xf971
                         0000F975   828 _g_VOICAQ	=	0xf975
                         0000F9F5   829 _g_VOICBQ	=	0xf9f5
                         0000FA75   830 _g_VOICCQ	=	0xfa75
                         0000FAF5   831 _g_RS2IQ	=	0xfaf5
                         0000FAF5   832 _g_DPPAGE	=	0xfaf5
                         0000FAF6   833 _g_ACPAGE	=	0xfaf6
                         0000FAF7   834 _g_AVCSAV	=	0xfaf7
                         0000FAF8   835 _g_EXBRSA	=	0xfaf8
                         0000FAF9   836 _g_CHRCNT	=	0xfaf9
                         0000FAFA   837 _g_ROMA	=	0xfafa
                         0000FAFC   838 _g_MODE	=	0xfafc
                         0000FAFD   839 _g_NORUSE	=	0xfafd
                         0000FAFE   840 _g_XSAVE	=	0xfafe
                         0000FB00   841 _g_YSAVE	=	0xfb00
                         0000FB03   842 _g_RSTMP	=	0xfb03
                         0000FB03   843 _g_TOCNT	=	0xfb03
                         0000FB04   844 _g_RSFCB	=	0xfb04
                         0000FB06   845 _g_RSIQLN	=	0xfb06
                         0000FB07   846 _g_MEXBIh	=	0xfb07
                         0000FB0C   847 _g_OLDSTT	=	0xfb0c
                         0000FB0C   848 _g_OLDINT	=	0xfb0c
                         0000FB16   849 _g_DEVNUM	=	0xfb16
                         0000FB17   850 _g_DATCNT	=	0xfb17
                         0000FB1A   851 _g_ERRORS	=	0xfb1a
                         0000FB1B   852 _g_FLAGS	=	0xfb1b
                         0000FB1C   853 _g_ESTBLS	=	0xfb1c
                         0000FB1D   854 _g_COMMSK	=	0xfb1d
                         0000FB1E   855 _g_LSTCOM	=	0xfb1e
                         0000FB1F   856 _g_LSTMOD	=	0xfb1f
                         0000FB35   857 _g_PRSCNT	=	0xfb35
                         0000FB36   858 _g_SAVSP	=	0xfb36
                         0000FB38   859 _g_VOICEN	=	0xfb38
                         0000FB39   860 _g_SAVVOL	=	0xfb39
                         0000FB3B   861 _g_MCLLEN	=	0xfb3b
                         0000FB3C   862 _g_MCLPTR	=	0xfb3c
                         0000FB3E   863 _g_QUEUEN	=	0xfb3e
                         0000FB3F   864 _g_MUSICF	=	0xfb3f
                         0000FB40   865 _g_PLYCNT	=	0xfb40
                         0000FB41   866 _g_VCBA	=	0xfb41
                         0000FB66   867 _g_VCBB	=	0xfb66
                         0000FB8B   868 _g_VCBC	=	0xfb8b
                         0000FBB0   869 _g_ENSTOP	=	0xfbb0
                         0000FBB1   870 _g_BASROM	=	0xfbb1
                         0000FBB2   871 _g_LINTTB	=	0xfbb2
                         0000FBCA   872 _g_FSTPOS	=	0xfbca
                         0000FBCC   873 _g_CODSAV	=	0xfbcc
                         0000FBCD   874 _g_FNKSWI	=	0xfbcd
                         0000FBCE   875 _g_FNKFLG	=	0xfbce
                         0000FBD8   876 _g_ONGSBF	=	0xfbd8
                         0000FBD9   877 _g_CLIKFL	=	0xfbd9
                         0000FBDA   878 _g_OLDKEY	=	0xfbda
                         0000FBE5   879 _g_NEWKEY	=	0xfbe5
                         0000FBF0   880 _g_KEYBUF	=	0xfbf0
                         0000FC18   881 _g_LINWRK	=	0xfc18
                         0000FC40   882 _g_PATWRK	=	0xfc40
                         0000FC48   883 _g_BOTTOM	=	0xfc48
                         0000FC4A   884 _g_HIMEM	=	0xfc4a
                         0000FC4C   885 _g_TRPTBL	=	0xfc4c
                         0000FC9A   886 _g_RTYCNT	=	0xfc9a
                         0000FC9B   887 _g_INTFLG	=	0xfc9b
                         0000FC9C   888 _g_PADY	=	0xfc9c
                         0000FC9D   889 _g_PADX	=	0xfc9d
                         0000FC9E   890 _g_JIFFY	=	0xfc9e
                         0000FCA0   891 _g_INTVAL	=	0xfca0
                         0000FCA2   892 _g_INTCNT	=	0xfca2
                         0000FCA4   893 _g_LOWLIM	=	0xfca4
                         0000FCA5   894 _g_WINWID	=	0xfca5
                         0000FCA6   895 _g_GRPHED	=	0xfca6
                         0000FCA7   896 _g_ESCCNT	=	0xfca7
                         0000FCA8   897 _g_INSFLG	=	0xfca8
                         0000FCA9   898 _g_CSRSW	=	0xfca9
                         0000FCAA   899 _g_CSTYLE	=	0xfcaa
                         0000FCAB   900 _g_CAPST	=	0xfcab
                         0000FCAC   901 _g_KANAST	=	0xfcac
                         0000FCAD   902 _g_KANAMD	=	0xfcad
                         0000FCAE   903 _g_FLBMEM	=	0xfcae
                         0000FCAF   904 _g_SCRMOD	=	0xfcaf
                         0000FCB0   905 _g_OLDSCR	=	0xfcb0
                         0000FCB1   906 _g_CASPRV	=	0xfcb1
                         0000FCB2   907 _g_BRDATR	=	0xfcb2
                         0000FCB3   908 _g_GXPOS	=	0xfcb3
                         0000FCB5   909 _g_GYPOS	=	0xfcb5
                         0000FCBB   910 _g_DRWFLG	=	0xfcbb
                         0000FCBC   911 _g_DRWSCL	=	0xfcbc
                         0000FCBD   912 _g_DRWANG	=	0xfcbd
                         0000FCC1   913 _g_MNROM	=	0xfcc1
                         0000FCC1   914 _g_EXPTBL	=	0xfcc1
                         0000FCC5   915 _g_SLTTBL	=	0xfcc5
                         0000FCC9   916 _g_SLTATR	=	0xfcc9
                         0000FD09   917 _g_SLTWRK	=	0xfd09
                         0000FD89   918 _g_PROCNM	=	0xfd89
                         0000FFE7   919 _g_RG08SAV	=	0xffe7
                         0000FFE8   920 _g_RG09SAV	=	0xffe8
                         0000FFE9   921 _g_RG10SAV	=	0xffe9
                         0000FFEA   922 _g_RG11SAV	=	0xffea
                         0000FFEB   923 _g_RG12SAV	=	0xffeb
                         0000FFEC   924 _g_RG13SAV	=	0xffec
                         0000FFED   925 _g_RG14SAV	=	0xffed
                         0000FFEE   926 _g_RG15SAV	=	0xffee
                         0000FFEF   927 _g_RG16SAV	=	0xffef
                         0000FFF0   928 _g_RG17SAV	=	0xfff0
                         0000FFF1   929 _g_RG18SAV	=	0xfff1
                         0000FFF2   930 _g_RG19SAV	=	0xfff2
                         0000FFF3   931 _g_RG20SAV	=	0xfff3
                         0000FFF4   932 _g_RG21SAV	=	0xfff4
                         0000FFF5   933 _g_RG22SAV	=	0xfff5
                         0000FFF6   934 _g_RG23SAV	=	0xfff6
                         0000FFF7   935 _g_MINROM	=	0xfff7
                         0000FFF8   936 _g_SVFFF8	=	0xfff8
                         0000FFFA   937 _g_RG25SAV	=	0xfffa
                         0000FFFB   938 _g_RG26SAV	=	0xfffb
                         0000FFFC   939 _g_RG27SAV	=	0xfffc
                         0000FFFD   940 _g_SVFFFD	=	0xfffd
                         00000004   941 _g_CGTABL	=	0x0004
                         00000006   942 _g_VDP_DR	=	0x0006
                         00000007   943 _g_VDP_DW	=	0x0007
                         0000002B   944 _g_BASRVN	=	0x002b
                         0000002B   945 _g_ROMVersion	=	0x002b
                         0000002D   946 _g_MSXVER	=	0x002d
                         0000002E   947 _g_MSXMID	=	0x002e
                         00000034   948 _g_CHAR_16	=	0x0034
                         00000000   949 _g_SUBRID	=	0x0000
                         00000002   950 _g_STRSRC	=	0x0002
                         0000F30F   951 _g_KANJTABLE	=	0xf30f
                         0000F323   952 _g_DISKVE	=	0xf323
                         0000F325   953 _g_BREAKV	=	0xf325
                         0000F341   954 _g_RAMAD0	=	0xf341
                         0000F342   955 _g_RAMAD1	=	0xf342
                         0000F343   956 _g_RAMAD2	=	0xf343
                         0000F344   957 _g_RAMAD3	=	0xf344
                         0000F348   958 _g_MASTER	=	0xf348
                         0000F37D   959 _g_BDOS	=	0xf37d
                                    960 	.area _CODE
                                    961 	.area _INITIALIZER
                                    962 	.area _CABS (ABS)
