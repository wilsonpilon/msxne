                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ne
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _DOS_CharOutput
                                     13 	.globl _Keyboard_IsKeyPushed
                                     14 	.globl _Keyboard_Update
                                     15 	.globl _DOS_TPAUpperAddr
                                     16 	.globl _g_SLTSL
                                     17 	.globl _g_GRPACY
                                     18 	.globl _g_GRPACX
                                     19 	.globl _g_LOGOPR
                                     20 	.globl _g_CMASK
                                     21 	.globl _g_CLOC
                                     22 	.globl _g_FNKSTR
                                     23 	.globl _g_ATRBYT
                                     24 	.globl _g_BDRCLR
                                     25 	.globl _g_BAKCLR
                                     26 	.globl _g_FORCLR
                                     27 	.globl _g_CSRX
                                     28 	.globl _g_CSRY
                                     29 	.globl _g_CLIKSW
                                     30 	.globl _g_MLTPAT
                                     31 	.globl _g_MLTATR
                                     32 	.globl _g_MLTCGP
                                     33 	.globl _g_MLTCOL
                                     34 	.globl _g_MLTNAM
                                     35 	.globl _g_GRPPAT
                                     36 	.globl _g_GRPATR
                                     37 	.globl _g_GRPCGP
                                     38 	.globl _g_GRPCOL
                                     39 	.globl _g_GRPNAM
                                     40 	.globl _g_T32PAT
                                     41 	.globl _g_T32ATR
                                     42 	.globl _g_T32CGP
                                     43 	.globl _g_T32COL
                                     44 	.globl _g_T32NAM
                                     45 	.globl _g_TXTPAT
                                     46 	.globl _g_TXTATR
                                     47 	.globl _g_TXTCGP
                                     48 	.globl _g_TXTCOL
                                     49 	.globl _g_TXTNAM
                                     50 	.globl _g_CLMLST
                                     51 	.globl _g_CRTCNT
                                     52 	.globl _g_LINLEN
                                     53 	.globl _g_LINL32
                                     54 	.globl _g_LINL40
                                     55 	.globl _g_BDOS
                                     56 	.globl _g_MASTER
                                     57 	.globl _g_RAMAD3
                                     58 	.globl _g_RAMAD2
                                     59 	.globl _g_RAMAD1
                                     60 	.globl _g_RAMAD0
                                     61 	.globl _g_BREAKV
                                     62 	.globl _g_DISKVE
                                     63 	.globl _g_KANJTABLE
                                     64 	.globl _g_STRSRC
                                     65 	.globl _g_SUBRID
                                     66 	.globl _g_CHAR_16
                                     67 	.globl _g_MSXMID
                                     68 	.globl _g_MSXVER
                                     69 	.globl _g_ROMVersion
                                     70 	.globl _g_BASRVN
                                     71 	.globl _g_VDP_DW
                                     72 	.globl _g_VDP_DR
                                     73 	.globl _g_CGTABL
                                     74 	.globl _g_SVFFFD
                                     75 	.globl _g_RG27SAV
                                     76 	.globl _g_RG26SAV
                                     77 	.globl _g_RG25SAV
                                     78 	.globl _g_SVFFF8
                                     79 	.globl _g_MINROM
                                     80 	.globl _g_RG23SAV
                                     81 	.globl _g_RG22SAV
                                     82 	.globl _g_RG21SAV
                                     83 	.globl _g_RG20SAV
                                     84 	.globl _g_RG19SAV
                                     85 	.globl _g_RG18SAV
                                     86 	.globl _g_RG17SAV
                                     87 	.globl _g_RG16SAV
                                     88 	.globl _g_RG15SAV
                                     89 	.globl _g_RG14SAV
                                     90 	.globl _g_RG13SAV
                                     91 	.globl _g_RG12SAV
                                     92 	.globl _g_RG11SAV
                                     93 	.globl _g_RG10SAV
                                     94 	.globl _g_RG09SAV
                                     95 	.globl _g_RG08SAV
                                     96 	.globl _g_PROCNM
                                     97 	.globl _g_SLTWRK
                                     98 	.globl _g_SLTATR
                                     99 	.globl _g_SLTTBL
                                    100 	.globl _g_EXPTBL
                                    101 	.globl _g_MNROM
                                    102 	.globl _g_DRWANG
                                    103 	.globl _g_DRWSCL
                                    104 	.globl _g_DRWFLG
                                    105 	.globl _g_GYPOS
                                    106 	.globl _g_GXPOS
                                    107 	.globl _g_BRDATR
                                    108 	.globl _g_CASPRV
                                    109 	.globl _g_OLDSCR
                                    110 	.globl _g_SCRMOD
                                    111 	.globl _g_FLBMEM
                                    112 	.globl _g_KANAMD
                                    113 	.globl _g_KANAST
                                    114 	.globl _g_CAPST
                                    115 	.globl _g_CSTYLE
                                    116 	.globl _g_CSRSW
                                    117 	.globl _g_INSFLG
                                    118 	.globl _g_ESCCNT
                                    119 	.globl _g_GRPHED
                                    120 	.globl _g_WINWID
                                    121 	.globl _g_LOWLIM
                                    122 	.globl _g_INTCNT
                                    123 	.globl _g_INTVAL
                                    124 	.globl _g_JIFFY
                                    125 	.globl _g_PADX
                                    126 	.globl _g_PADY
                                    127 	.globl _g_INTFLG
                                    128 	.globl _g_RTYCNT
                                    129 	.globl _g_TRPTBL
                                    130 	.globl _g_HIMEM
                                    131 	.globl _g_BOTTOM
                                    132 	.globl _g_PATWRK
                                    133 	.globl _g_LINWRK
                                    134 	.globl _g_KEYBUF
                                    135 	.globl _g_NEWKEY
                                    136 	.globl _g_OLDKEY
                                    137 	.globl _g_CLIKFL
                                    138 	.globl _g_ONGSBF
                                    139 	.globl _g_FNKFLG
                                    140 	.globl _g_FNKSWI
                                    141 	.globl _g_CODSAV
                                    142 	.globl _g_FSTPOS
                                    143 	.globl _g_LINTTB
                                    144 	.globl _g_BASROM
                                    145 	.globl _g_ENSTOP
                                    146 	.globl _g_VCBC
                                    147 	.globl _g_VCBB
                                    148 	.globl _g_VCBA
                                    149 	.globl _g_PLYCNT
                                    150 	.globl _g_MUSICF
                                    151 	.globl _g_QUEUEN
                                    152 	.globl _g_MCLPTR
                                    153 	.globl _g_MCLLEN
                                    154 	.globl _g_SAVVOL
                                    155 	.globl _g_VOICEN
                                    156 	.globl _g_SAVSP
                                    157 	.globl _g_PRSCNT
                                    158 	.globl _g_LSTMOD
                                    159 	.globl _g_LSTCOM
                                    160 	.globl _g_COMMSK
                                    161 	.globl _g_ESTBLS
                                    162 	.globl _g_FLAGS
                                    163 	.globl _g_ERRORS
                                    164 	.globl _g_DATCNT
                                    165 	.globl _g_DEVNUM
                                    166 	.globl _g_OLDINT
                                    167 	.globl _g_OLDSTT
                                    168 	.globl _g_MEXBIh
                                    169 	.globl _g_RSIQLN
                                    170 	.globl _g_RSFCB
                                    171 	.globl _g_TOCNT
                                    172 	.globl _g_RSTMP
                                    173 	.globl _g_YSAVE
                                    174 	.globl _g_XSAVE
                                    175 	.globl _g_NORUSE
                                    176 	.globl _g_MODE
                                    177 	.globl _g_ROMA
                                    178 	.globl _g_CHRCNT
                                    179 	.globl _g_EXBRSA
                                    180 	.globl _g_AVCSAV
                                    181 	.globl _g_ACPAGE
                                    182 	.globl _g_DPPAGE
                                    183 	.globl _g_RS2IQ
                                    184 	.globl _g_VOICCQ
                                    185 	.globl _g_VOICBQ
                                    186 	.globl _g_VOICAQ
                                    187 	.globl _g_QUEBAK
                                    188 	.globl _g_QUETAB
                                    189 	.globl _g_ASPCT2
                                    190 	.globl _g_ASPCT1
                                    191 	.globl _g_HEADER
                                    192 	.globl _g_HIGH
                                    193 	.globl _g_LOW
                                    194 	.globl _g_CS240
                                    195 	.globl _g_CS120
                                    196 	.globl _g_GETPNT
                                    197 	.globl _g_PUTPNT
                                    198 	.globl _g_REPCNT
                                    199 	.globl _g_SCNCNT
                                    200 	.globl _g_FRCNEW
                                    201 	.globl _g_QUEUES
                                    202 	.globl _g_MINUPD
                                    203 	.globl _g_MAXUPD
                                    204 	.globl _g_TRGFLG
                                    205 	.globl _g_STATFL
                                    206 	.globl _g_RG7SAV
                                    207 	.globl _g_RG6SAV
                                    208 	.globl _g_RG5SAV
                                    209 	.globl _g_RG4SAV
                                    210 	.globl _g_RG3SAV
                                    211 	.globl _g_RG2SAV
                                    212 	.globl _g_RG1SAV
                                    213 	.globl _g_RG0SAV
                                    214 	.globl _g_CNSDFG
                                    215 	.globl _g_USRTAB
                                    216 	.globl _g_CLPRIM
                                    217 	.globl _g_WRPRIM
                                    218 	.globl _g_RDPRIM
                                    219 ;--------------------------------------------------------
                                    220 ; special function registers
                                    221 ;--------------------------------------------------------
                         000000A8   222 _g_PortPrimarySlot	=	0x00a8
                         000000A9   223 _g_PortReadKeyboard	=	0x00a9
                         000000AA   224 _g_PortAccessKeyboard	=	0x00aa
                         000000AB   225 _g_PortControl	=	0x00ab
                         00000098   226 _g_VDP_DataPort	=	0x0098
                         00000099   227 _g_VDP_RegPort	=	0x0099
                         00000099   228 _g_VDP_AddrPort	=	0x0099
                         00000099   229 _g_VDP_StatPort	=	0x0099
                         000000A0   230 _g_PSG_RegPort	=	0x00a0
                         000000A1   231 _g_PSG_DataPort	=	0x00a1
                         000000A2   232 _g_PSG_StatPort	=	0x00a2
                         00000010   233 _g_PSG_Ext_RegPort	=	0x0010
                         00000011   234 _g_PSG_Ext_DataPort	=	0x0011
                         00000012   235 _g_PSG_Ext_StatPort	=	0x0012
                         0000007C   236 _g_MSXMusic_IndexPort	=	0x007c
                         0000007D   237 _g_MSXMusic_DataPort	=	0x007d
                         000000C0   238 _g_MSXAudio_IndexPort	=	0x00c0
                         000000C1   239 _g_MSXAudio_DataPort	=	0x00c1
                         000000C2   240 _g_MSXAudio_IndexPort2	=	0x00c2
                         000000C3   241 _g_MSXAudio_DataPort2	=	0x00c3
                         000000B4   242 _g_RTC_AddrPort	=	0x00b4
                         000000B5   243 _g_RTC_DataPort	=	0x00b5
                                    244 ;--------------------------------------------------------
                                    245 ; ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area _DATA
                         0000F3AE   248 _g_LINL40	=	0xf3ae
                         0000F3AF   249 _g_LINL32	=	0xf3af
                         0000F3B0   250 _g_LINLEN	=	0xf3b0
                         0000F3B1   251 _g_CRTCNT	=	0xf3b1
                         0000F3B2   252 _g_CLMLST	=	0xf3b2
                         0000F3B3   253 _g_TXTNAM	=	0xf3b3
                         0000F3B5   254 _g_TXTCOL	=	0xf3b5
                         0000F3B7   255 _g_TXTCGP	=	0xf3b7
                         0000F3B9   256 _g_TXTATR	=	0xf3b9
                         0000F3BB   257 _g_TXTPAT	=	0xf3bb
                         0000F3BD   258 _g_T32NAM	=	0xf3bd
                         0000F3BF   259 _g_T32COL	=	0xf3bf
                         0000F3C1   260 _g_T32CGP	=	0xf3c1
                         0000F3C3   261 _g_T32ATR	=	0xf3c3
                         0000F3C5   262 _g_T32PAT	=	0xf3c5
                         0000F3C7   263 _g_GRPNAM	=	0xf3c7
                         0000F3C9   264 _g_GRPCOL	=	0xf3c9
                         0000F3CB   265 _g_GRPCGP	=	0xf3cb
                         0000F3CD   266 _g_GRPATR	=	0xf3cd
                         0000F3CF   267 _g_GRPPAT	=	0xf3cf
                         0000F3D1   268 _g_MLTNAM	=	0xf3d1
                         0000F3D3   269 _g_MLTCOL	=	0xf3d3
                         0000F3D5   270 _g_MLTCGP	=	0xf3d5
                         0000F3D7   271 _g_MLTATR	=	0xf3d7
                         0000F3D9   272 _g_MLTPAT	=	0xf3d9
                         0000F3DB   273 _g_CLIKSW	=	0xf3db
                         0000F3DC   274 _g_CSRY	=	0xf3dc
                         0000F3DD   275 _g_CSRX	=	0xf3dd
                         0000F3E9   276 _g_FORCLR	=	0xf3e9
                         0000F3EA   277 _g_BAKCLR	=	0xf3ea
                         0000F3EB   278 _g_BDRCLR	=	0xf3eb
                         0000F3F2   279 _g_ATRBYT	=	0xf3f2
                         0000F87F   280 _g_FNKSTR	=	0xf87f
                         0000F92A   281 _g_CLOC	=	0xf92a
                         0000F92C   282 _g_CMASK	=	0xf92c
                         0000FB02   283 _g_LOGOPR	=	0xfb02
                         0000FCB7   284 _g_GRPACX	=	0xfcb7
                         0000FCB9   285 _g_GRPACY	=	0xfcb9
                         0000FFFF   286 _g_SLTSL	=	0xffff
                         00000006   287 _DOS_TPAUpperAddr	=	0x0006
                                    288 ;--------------------------------------------------------
                                    289 ; ram data
                                    290 ;--------------------------------------------------------
                                    291 	.area _INITIALIZED
                                    292 ;--------------------------------------------------------
                                    293 ; absolute external ram data
                                    294 ;--------------------------------------------------------
                                    295 	.area _DABS (ABS)
                                    296 ;--------------------------------------------------------
                                    297 ; global & static initialisations
                                    298 ;--------------------------------------------------------
                                    299 	.area _HOME
                                    300 	.area _GSINIT
                                    301 	.area _GSFINAL
                                    302 	.area _GSINIT
                                    303 ;--------------------------------------------------------
                                    304 ; Home
                                    305 ;--------------------------------------------------------
                                    306 	.area _HOME
                                    307 	.area _HOME
                                    308 ;--------------------------------------------------------
                                    309 ; code
                                    310 ;--------------------------------------------------------
                                    311 	.area _CODE
                                    312 ;./ne.c:11: int main()
                                    313 ;	---------------------------------
                                    314 ; Function main
                                    315 ; ---------------------------------
    00000000                        316 _main::
                                    317 ;./ne.c:13: c8 curchar = 0;
    00000000 0E 00            [ 7]  318 	ld	c, #0x00
                                    319 ;./ne.c:14: while (1)
    00000002                        320 00183$:
                                    321 ;./ne.c:16: Keyboard_Update();
    00000002 C5               [11]  322 	push	bc
    00000003 CDr00r00         [17]  323 	call	_Keyboard_Update
    00000006 3E 08            [ 7]  324 	ld	a, #0x08
    00000008 CDr00r00         [17]  325 	call	_Keyboard_IsKeyPushed
    0000000B C1               [10]  326 	pop	bc
    0000000C B7               [ 4]  327 	or	a, a
    0000000D 28 02            [12]  328 	jr	Z, 00102$
                                    329 ;./ne.c:18: curchar = ' ';
    0000000F 0E 20            [ 7]  330 	ld	c, #0x20
    00000011                        331 00102$:
                                    332 ;./ne.c:20: if(Keyboard_IsKeyPushed(KEY_A))
    00000011 C5               [11]  333 	push	bc
    00000012 3E 62            [ 7]  334 	ld	a, #0x62
    00000014 CDr00r00         [17]  335 	call	_Keyboard_IsKeyPushed
    00000017 C1               [10]  336 	pop	bc
    00000018 B7               [ 4]  337 	or	a, a
    00000019 28 02            [12]  338 	jr	Z, 00104$
                                    339 ;./ne.c:21: curchar = 'A';
    0000001B 0E 41            [ 7]  340 	ld	c, #0x41
    0000001D                        341 00104$:
                                    342 ;./ne.c:22: if(Keyboard_IsKeyPushed(KEY_B))
    0000001D C5               [11]  343 	push	bc
    0000001E 3E 72            [ 7]  344 	ld	a, #0x72
    00000020 CDr00r00         [17]  345 	call	_Keyboard_IsKeyPushed
    00000023 C1               [10]  346 	pop	bc
    00000024 B7               [ 4]  347 	or	a, a
    00000025 28 02            [12]  348 	jr	Z, 00106$
                                    349 ;./ne.c:23: curchar = 'B';
    00000027 0E 42            [ 7]  350 	ld	c, #0x42
    00000029                        351 00106$:
                                    352 ;./ne.c:24: if(Keyboard_IsKeyPushed(KEY_C))
    00000029 C5               [11]  353 	push	bc
    0000002A 3E 03            [ 7]  354 	ld	a, #0x03
    0000002C CDr00r00         [17]  355 	call	_Keyboard_IsKeyPushed
    0000002F C1               [10]  356 	pop	bc
    00000030 B7               [ 4]  357 	or	a, a
    00000031 28 02            [12]  358 	jr	Z, 00108$
                                    359 ;./ne.c:25: curchar = 'C';
    00000033 0E 43            [ 7]  360 	ld	c, #0x43
    00000035                        361 00108$:
                                    362 ;./ne.c:26: if(Keyboard_IsKeyPushed(KEY_D))
    00000035 C5               [11]  363 	push	bc
    00000036 3E 13            [ 7]  364 	ld	a, #0x13
    00000038 CDr00r00         [17]  365 	call	_Keyboard_IsKeyPushed
    0000003B C1               [10]  366 	pop	bc
    0000003C B7               [ 4]  367 	or	a, a
    0000003D 28 02            [12]  368 	jr	Z, 00110$
                                    369 ;./ne.c:27: curchar = 'D';
    0000003F 0E 44            [ 7]  370 	ld	c, #0x44
    00000041                        371 00110$:
                                    372 ;./ne.c:28: if(Keyboard_IsKeyPushed(KEY_E))
    00000041 C5               [11]  373 	push	bc
    00000042 3E 23            [ 7]  374 	ld	a, #0x23
    00000044 CDr00r00         [17]  375 	call	_Keyboard_IsKeyPushed
    00000047 C1               [10]  376 	pop	bc
    00000048 B7               [ 4]  377 	or	a, a
    00000049 28 02            [12]  378 	jr	Z, 00112$
                                    379 ;./ne.c:29: curchar = 'E';
    0000004B 0E 45            [ 7]  380 	ld	c, #0x45
    0000004D                        381 00112$:
                                    382 ;./ne.c:30: if(Keyboard_IsKeyPushed(KEY_F))
    0000004D C5               [11]  383 	push	bc
    0000004E 3E 33            [ 7]  384 	ld	a, #0x33
    00000050 CDr00r00         [17]  385 	call	_Keyboard_IsKeyPushed
    00000053 C1               [10]  386 	pop	bc
    00000054 B7               [ 4]  387 	or	a, a
    00000055 28 02            [12]  388 	jr	Z, 00114$
                                    389 ;./ne.c:31: curchar = 'F';
    00000057 0E 46            [ 7]  390 	ld	c, #0x46
    00000059                        391 00114$:
                                    392 ;./ne.c:32: if(Keyboard_IsKeyPushed(KEY_G))
    00000059 C5               [11]  393 	push	bc
    0000005A 3E 43            [ 7]  394 	ld	a, #0x43
    0000005C CDr00r00         [17]  395 	call	_Keyboard_IsKeyPushed
    0000005F C1               [10]  396 	pop	bc
    00000060 B7               [ 4]  397 	or	a, a
    00000061 28 02            [12]  398 	jr	Z, 00116$
                                    399 ;./ne.c:33: curchar = 'G';
    00000063 0E 47            [ 7]  400 	ld	c, #0x47
    00000065                        401 00116$:
                                    402 ;./ne.c:34: if(Keyboard_IsKeyPushed(KEY_H))
    00000065 C5               [11]  403 	push	bc
    00000066 3E 53            [ 7]  404 	ld	a, #0x53
    00000068 CDr00r00         [17]  405 	call	_Keyboard_IsKeyPushed
    0000006B C1               [10]  406 	pop	bc
    0000006C B7               [ 4]  407 	or	a, a
    0000006D 28 02            [12]  408 	jr	Z, 00118$
                                    409 ;./ne.c:35: curchar = 'H';
    0000006F 0E 48            [ 7]  410 	ld	c, #0x48
    00000071                        411 00118$:
                                    412 ;./ne.c:36: if(Keyboard_IsKeyPushed(KEY_I))
    00000071 C5               [11]  413 	push	bc
    00000072 3E 63            [ 7]  414 	ld	a, #0x63
    00000074 CDr00r00         [17]  415 	call	_Keyboard_IsKeyPushed
    00000077 C1               [10]  416 	pop	bc
    00000078 B7               [ 4]  417 	or	a, a
    00000079 28 02            [12]  418 	jr	Z, 00120$
                                    419 ;./ne.c:37: curchar = 'I';
    0000007B 0E 49            [ 7]  420 	ld	c, #0x49
    0000007D                        421 00120$:
                                    422 ;./ne.c:38: if(Keyboard_IsKeyPushed(KEY_J))
    0000007D C5               [11]  423 	push	bc
    0000007E 3E 73            [ 7]  424 	ld	a, #0x73
    00000080 CDr00r00         [17]  425 	call	_Keyboard_IsKeyPushed
    00000083 C1               [10]  426 	pop	bc
    00000084 B7               [ 4]  427 	or	a, a
    00000085 28 02            [12]  428 	jr	Z, 00122$
                                    429 ;./ne.c:39: curchar = 'J';
    00000087 0E 4A            [ 7]  430 	ld	c, #0x4a
    00000089                        431 00122$:
                                    432 ;./ne.c:40: if(Keyboard_IsKeyPushed(KEY_K))
    00000089 C5               [11]  433 	push	bc
    0000008A 3E 04            [ 7]  434 	ld	a, #0x04
    0000008C CDr00r00         [17]  435 	call	_Keyboard_IsKeyPushed
    0000008F C1               [10]  436 	pop	bc
    00000090 B7               [ 4]  437 	or	a, a
    00000091 28 02            [12]  438 	jr	Z, 00124$
                                    439 ;./ne.c:41: curchar = 'K';
    00000093 0E 4B            [ 7]  440 	ld	c, #0x4b
    00000095                        441 00124$:
                                    442 ;./ne.c:42: if(Keyboard_IsKeyPushed(KEY_L))
    00000095 C5               [11]  443 	push	bc
    00000096 3E 14            [ 7]  444 	ld	a, #0x14
    00000098 CDr00r00         [17]  445 	call	_Keyboard_IsKeyPushed
    0000009B C1               [10]  446 	pop	bc
    0000009C B7               [ 4]  447 	or	a, a
    0000009D 28 02            [12]  448 	jr	Z, 00126$
                                    449 ;./ne.c:43: curchar = 'L';
    0000009F 0E 4C            [ 7]  450 	ld	c, #0x4c
    000000A1                        451 00126$:
                                    452 ;./ne.c:44: if(Keyboard_IsKeyPushed(KEY_M))
    000000A1 C5               [11]  453 	push	bc
    000000A2 3E 24            [ 7]  454 	ld	a, #0x24
    000000A4 CDr00r00         [17]  455 	call	_Keyboard_IsKeyPushed
    000000A7 C1               [10]  456 	pop	bc
    000000A8 B7               [ 4]  457 	or	a, a
    000000A9 28 02            [12]  458 	jr	Z, 00128$
                                    459 ;./ne.c:45: curchar = 'M';
    000000AB 0E 4D            [ 7]  460 	ld	c, #0x4d
    000000AD                        461 00128$:
                                    462 ;./ne.c:46: if(Keyboard_IsKeyPushed(KEY_N))
    000000AD C5               [11]  463 	push	bc
    000000AE 3E 34            [ 7]  464 	ld	a, #0x34
    000000B0 CDr00r00         [17]  465 	call	_Keyboard_IsKeyPushed
    000000B3 C1               [10]  466 	pop	bc
    000000B4 B7               [ 4]  467 	or	a, a
    000000B5 28 02            [12]  468 	jr	Z, 00130$
                                    469 ;./ne.c:47: curchar = 'N';
    000000B7 0E 4E            [ 7]  470 	ld	c, #0x4e
    000000B9                        471 00130$:
                                    472 ;./ne.c:48: if(Keyboard_IsKeyPushed(KEY_O))
    000000B9 C5               [11]  473 	push	bc
    000000BA 3E 44            [ 7]  474 	ld	a, #0x44
    000000BC CDr00r00         [17]  475 	call	_Keyboard_IsKeyPushed
    000000BF C1               [10]  476 	pop	bc
    000000C0 B7               [ 4]  477 	or	a, a
    000000C1 28 02            [12]  478 	jr	Z, 00132$
                                    479 ;./ne.c:49: curchar = 'O';
    000000C3 0E 4F            [ 7]  480 	ld	c, #0x4f
    000000C5                        481 00132$:
                                    482 ;./ne.c:50: if(Keyboard_IsKeyPushed(KEY_P))
    000000C5 C5               [11]  483 	push	bc
    000000C6 3E 54            [ 7]  484 	ld	a, #0x54
    000000C8 CDr00r00         [17]  485 	call	_Keyboard_IsKeyPushed
    000000CB C1               [10]  486 	pop	bc
    000000CC B7               [ 4]  487 	or	a, a
    000000CD 28 02            [12]  488 	jr	Z, 00134$
                                    489 ;./ne.c:51: curchar = 'P';
    000000CF 0E 50            [ 7]  490 	ld	c, #0x50
    000000D1                        491 00134$:
                                    492 ;./ne.c:52: if(Keyboard_IsKeyPushed(KEY_Q))
    000000D1 C5               [11]  493 	push	bc
    000000D2 3E 64            [ 7]  494 	ld	a, #0x64
    000000D4 CDr00r00         [17]  495 	call	_Keyboard_IsKeyPushed
    000000D7 C1               [10]  496 	pop	bc
    000000D8 B7               [ 4]  497 	or	a, a
    000000D9 28 02            [12]  498 	jr	Z, 00136$
                                    499 ;./ne.c:53: curchar = 'Q';
    000000DB 0E 51            [ 7]  500 	ld	c, #0x51
    000000DD                        501 00136$:
                                    502 ;./ne.c:54: if(Keyboard_IsKeyPushed(KEY_R))
    000000DD C5               [11]  503 	push	bc
    000000DE 3E 74            [ 7]  504 	ld	a, #0x74
    000000E0 CDr00r00         [17]  505 	call	_Keyboard_IsKeyPushed
    000000E3 C1               [10]  506 	pop	bc
    000000E4 B7               [ 4]  507 	or	a, a
    000000E5 28 02            [12]  508 	jr	Z, 00138$
                                    509 ;./ne.c:55: curchar = 'R';
    000000E7 0E 52            [ 7]  510 	ld	c, #0x52
    000000E9                        511 00138$:
                                    512 ;./ne.c:56: if(Keyboard_IsKeyPushed(KEY_S))
    000000E9 C5               [11]  513 	push	bc
    000000EA 3E 05            [ 7]  514 	ld	a, #0x05
    000000EC CDr00r00         [17]  515 	call	_Keyboard_IsKeyPushed
    000000EF C1               [10]  516 	pop	bc
    000000F0 B7               [ 4]  517 	or	a, a
    000000F1 28 02            [12]  518 	jr	Z, 00140$
                                    519 ;./ne.c:57: curchar = 'S';
    000000F3 0E 53            [ 7]  520 	ld	c, #0x53
    000000F5                        521 00140$:
                                    522 ;./ne.c:58: if(Keyboard_IsKeyPushed(KEY_T))
    000000F5 C5               [11]  523 	push	bc
    000000F6 3E 15            [ 7]  524 	ld	a, #0x15
    000000F8 CDr00r00         [17]  525 	call	_Keyboard_IsKeyPushed
    000000FB C1               [10]  526 	pop	bc
    000000FC B7               [ 4]  527 	or	a, a
    000000FD 28 02            [12]  528 	jr	Z, 00142$
                                    529 ;./ne.c:59: curchar = 'T';
    000000FF 0E 54            [ 7]  530 	ld	c, #0x54
    00000101                        531 00142$:
                                    532 ;./ne.c:60: if(Keyboard_IsKeyPushed(KEY_U))
    00000101 C5               [11]  533 	push	bc
    00000102 3E 25            [ 7]  534 	ld	a, #0x25
    00000104 CDr00r00         [17]  535 	call	_Keyboard_IsKeyPushed
    00000107 C1               [10]  536 	pop	bc
    00000108 B7               [ 4]  537 	or	a, a
    00000109 28 02            [12]  538 	jr	Z, 00144$
                                    539 ;./ne.c:61: curchar = 'U';
    0000010B 0E 55            [ 7]  540 	ld	c, #0x55
    0000010D                        541 00144$:
                                    542 ;./ne.c:62: if(Keyboard_IsKeyPushed(KEY_V))
    0000010D C5               [11]  543 	push	bc
    0000010E 3E 35            [ 7]  544 	ld	a, #0x35
    00000110 CDr00r00         [17]  545 	call	_Keyboard_IsKeyPushed
    00000113 C1               [10]  546 	pop	bc
    00000114 B7               [ 4]  547 	or	a, a
    00000115 28 02            [12]  548 	jr	Z, 00146$
                                    549 ;./ne.c:63: curchar = 'V';
    00000117 0E 56            [ 7]  550 	ld	c, #0x56
    00000119                        551 00146$:
                                    552 ;./ne.c:64: if(Keyboard_IsKeyPushed(KEY_W))
    00000119 C5               [11]  553 	push	bc
    0000011A 3E 45            [ 7]  554 	ld	a, #0x45
    0000011C CDr00r00         [17]  555 	call	_Keyboard_IsKeyPushed
    0000011F C1               [10]  556 	pop	bc
    00000120 B7               [ 4]  557 	or	a, a
    00000121 28 02            [12]  558 	jr	Z, 00148$
                                    559 ;./ne.c:65: curchar = 'W';
    00000123 0E 57            [ 7]  560 	ld	c, #0x57
    00000125                        561 00148$:
                                    562 ;./ne.c:66: if(Keyboard_IsKeyPushed(KEY_X))
    00000125 C5               [11]  563 	push	bc
    00000126 3E 55            [ 7]  564 	ld	a, #0x55
    00000128 CDr00r00         [17]  565 	call	_Keyboard_IsKeyPushed
    0000012B C1               [10]  566 	pop	bc
    0000012C B7               [ 4]  567 	or	a, a
    0000012D 28 02            [12]  568 	jr	Z, 00150$
                                    569 ;./ne.c:67: curchar = 'X';
    0000012F 0E 58            [ 7]  570 	ld	c, #0x58
    00000131                        571 00150$:
                                    572 ;./ne.c:68: if(Keyboard_IsKeyPushed(KEY_Y))
    00000131 C5               [11]  573 	push	bc
    00000132 3E 65            [ 7]  574 	ld	a, #0x65
    00000134 CDr00r00         [17]  575 	call	_Keyboard_IsKeyPushed
    00000137 C1               [10]  576 	pop	bc
    00000138 B7               [ 4]  577 	or	a, a
    00000139 28 02            [12]  578 	jr	Z, 00152$
                                    579 ;./ne.c:69: curchar = 'Y';
    0000013B 0E 59            [ 7]  580 	ld	c, #0x59
    0000013D                        581 00152$:
                                    582 ;./ne.c:70: if(Keyboard_IsKeyPushed(KEY_Z))
    0000013D C5               [11]  583 	push	bc
    0000013E 3E 75            [ 7]  584 	ld	a, #0x75
    00000140 CDr00r00         [17]  585 	call	_Keyboard_IsKeyPushed
    00000143 C1               [10]  586 	pop	bc
    00000144 B7               [ 4]  587 	or	a, a
    00000145 28 02            [12]  588 	jr	Z, 00154$
                                    589 ;./ne.c:71: curchar = 'Z';
    00000147 0E 5A            [ 7]  590 	ld	c, #0x5a
    00000149                        591 00154$:
                                    592 ;./ne.c:74: if(Keyboard_IsKeyPushed(KEY_0))
    00000149 C5               [11]  593 	push	bc
    0000014A AF               [ 4]  594 	xor	a, a
    0000014B CDr00r00         [17]  595 	call	_Keyboard_IsKeyPushed
    0000014E C1               [10]  596 	pop	bc
    0000014F B7               [ 4]  597 	or	a, a
    00000150 28 02            [12]  598 	jr	Z, 00156$
                                    599 ;./ne.c:75: curchar = '0';
    00000152 0E 30            [ 7]  600 	ld	c, #0x30
    00000154                        601 00156$:
                                    602 ;./ne.c:76: if(Keyboard_IsKeyPushed(KEY_1))
    00000154 C5               [11]  603 	push	bc
    00000155 3E 10            [ 7]  604 	ld	a, #0x10
    00000157 CDr00r00         [17]  605 	call	_Keyboard_IsKeyPushed
    0000015A C1               [10]  606 	pop	bc
    0000015B B7               [ 4]  607 	or	a, a
    0000015C 28 02            [12]  608 	jr	Z, 00158$
                                    609 ;./ne.c:77: curchar = '1';
    0000015E 0E 31            [ 7]  610 	ld	c, #0x31
    00000160                        611 00158$:
                                    612 ;./ne.c:78: if(Keyboard_IsKeyPushed(KEY_2))
    00000160 C5               [11]  613 	push	bc
    00000161 3E 20            [ 7]  614 	ld	a, #0x20
    00000163 CDr00r00         [17]  615 	call	_Keyboard_IsKeyPushed
    00000166 C1               [10]  616 	pop	bc
    00000167 B7               [ 4]  617 	or	a, a
    00000168 28 02            [12]  618 	jr	Z, 00160$
                                    619 ;./ne.c:79: curchar = '2';
    0000016A 0E 32            [ 7]  620 	ld	c, #0x32
    0000016C                        621 00160$:
                                    622 ;./ne.c:80: if(Keyboard_IsKeyPushed(KEY_3))
    0000016C C5               [11]  623 	push	bc
    0000016D 3E 30            [ 7]  624 	ld	a, #0x30
    0000016F CDr00r00         [17]  625 	call	_Keyboard_IsKeyPushed
    00000172 C1               [10]  626 	pop	bc
    00000173 B7               [ 4]  627 	or	a, a
    00000174 28 02            [12]  628 	jr	Z, 00162$
                                    629 ;./ne.c:81: curchar = '3';
    00000176 0E 33            [ 7]  630 	ld	c, #0x33
    00000178                        631 00162$:
                                    632 ;./ne.c:82: if(Keyboard_IsKeyPushed(KEY_4))
    00000178 C5               [11]  633 	push	bc
    00000179 3E 40            [ 7]  634 	ld	a, #0x40
    0000017B CDr00r00         [17]  635 	call	_Keyboard_IsKeyPushed
    0000017E C1               [10]  636 	pop	bc
    0000017F B7               [ 4]  637 	or	a, a
    00000180 28 02            [12]  638 	jr	Z, 00164$
                                    639 ;./ne.c:83: curchar = '4';
    00000182 0E 34            [ 7]  640 	ld	c, #0x34
    00000184                        641 00164$:
                                    642 ;./ne.c:84: if(Keyboard_IsKeyPushed(KEY_5))
    00000184 C5               [11]  643 	push	bc
    00000185 3E 50            [ 7]  644 	ld	a, #0x50
    00000187 CDr00r00         [17]  645 	call	_Keyboard_IsKeyPushed
    0000018A C1               [10]  646 	pop	bc
    0000018B B7               [ 4]  647 	or	a, a
    0000018C 28 02            [12]  648 	jr	Z, 00166$
                                    649 ;./ne.c:85: curchar = '5';
    0000018E 0E 35            [ 7]  650 	ld	c, #0x35
    00000190                        651 00166$:
                                    652 ;./ne.c:86: if(Keyboard_IsKeyPushed(KEY_6))
    00000190 C5               [11]  653 	push	bc
    00000191 3E 60            [ 7]  654 	ld	a, #0x60
    00000193 CDr00r00         [17]  655 	call	_Keyboard_IsKeyPushed
    00000196 C1               [10]  656 	pop	bc
    00000197 B7               [ 4]  657 	or	a, a
    00000198 28 02            [12]  658 	jr	Z, 00168$
                                    659 ;./ne.c:87: curchar = '6';
    0000019A 0E 36            [ 7]  660 	ld	c, #0x36
    0000019C                        661 00168$:
                                    662 ;./ne.c:88: if(Keyboard_IsKeyPushed(KEY_7))
    0000019C C5               [11]  663 	push	bc
    0000019D 3E 70            [ 7]  664 	ld	a, #0x70
    0000019F CDr00r00         [17]  665 	call	_Keyboard_IsKeyPushed
    000001A2 C1               [10]  666 	pop	bc
    000001A3 B7               [ 4]  667 	or	a, a
    000001A4 28 02            [12]  668 	jr	Z, 00170$
                                    669 ;./ne.c:89: curchar = '7';
    000001A6 0E 37            [ 7]  670 	ld	c, #0x37
    000001A8                        671 00170$:
                                    672 ;./ne.c:90: if(Keyboard_IsKeyPushed(KEY_8))
    000001A8 C5               [11]  673 	push	bc
    000001A9 3E 01            [ 7]  674 	ld	a, #0x01
    000001AB CDr00r00         [17]  675 	call	_Keyboard_IsKeyPushed
    000001AE C1               [10]  676 	pop	bc
    000001AF B7               [ 4]  677 	or	a, a
    000001B0 28 02            [12]  678 	jr	Z, 00172$
                                    679 ;./ne.c:91: curchar = '8';
    000001B2 0E 38            [ 7]  680 	ld	c, #0x38
    000001B4                        681 00172$:
                                    682 ;./ne.c:92: if(Keyboard_IsKeyPushed(KEY_9))
    000001B4 C5               [11]  683 	push	bc
    000001B5 3E 11            [ 7]  684 	ld	a, #0x11
    000001B7 CDr00r00         [17]  685 	call	_Keyboard_IsKeyPushed
    000001BA C1               [10]  686 	pop	bc
    000001BB B7               [ 4]  687 	or	a, a
    000001BC 28 02            [12]  688 	jr	Z, 00174$
                                    689 ;./ne.c:93: curchar = '9';
    000001BE 0E 39            [ 7]  690 	ld	c, #0x39
    000001C0                        691 00174$:
                                    692 ;./ne.c:94: if (Keyboard_IsKeyPushed(KEY_ESC))
    000001C0 C5               [11]  693 	push	bc
    000001C1 3E 27            [ 7]  694 	ld	a, #0x27
    000001C3 CDr00r00         [17]  695 	call	_Keyboard_IsKeyPushed
    000001C6 C1               [10]  696 	pop	bc
    000001C7 B7               [ 4]  697 	or	a, a
    000001C8 20 1F            [12]  698 	jr	NZ, 00184$
                                    699 ;./ne.c:96: if((curchar >= ' ') && (curchar <= 'Z'))
    000001CA 79               [ 4]  700 	ld	a, c
    000001CB D6 20            [ 7]  701 	sub	a, #0x20
    000001CD DAr02r00         [10]  702 	jp	C, 00183$
    000001D0 3E 5A            [ 7]  703 	ld	a, #0x5a
    000001D2 91               [ 4]  704 	sub	a, c
    000001D3 DAr02r00         [10]  705 	jp	C, 00183$
                                    706 ;./ne.c:98: if(!g_CAPST)
    000001D6 3A AB FC         [13]  707 	ld	a, (_g_CAPST+0)
    000001D9 B7               [ 4]  708 	or	a, a
    000001DA 20 04            [12]  709 	jr	NZ, 00178$
                                    710 ;./ne.c:99: curchar = curchar - 'A' + 'a';
    000001DC 79               [ 4]  711 	ld	a, c
    000001DD C6 20            [ 7]  712 	add	a, #0x20
    000001DF 4F               [ 4]  713 	ld	c, a
    000001E0                        714 00178$:
                                    715 ;./ne.c:100: DOS_CharOutput(curchar);
    000001E0 79               [ 4]  716 	ld	a, c
    000001E1 CDr00r00         [17]  717 	call	_DOS_CharOutput
                                    718 ;./ne.c:101: curchar = 0;
    000001E4 0E 00            [ 7]  719 	ld	c, #0x00
    000001E6 C3r02r00         [10]  720 	jp	00183$
    000001E9                        721 00184$:
                                    722 ;./ne.c:104: return 0;
    000001E9 11 00 00         [10]  723 	ld	de, #0x0000
                                    724 ;./ne.c:105: }
    000001EC C9               [10]  725 	ret
                         0000F380   726 _g_RDPRIM	=	0xf380
                         0000F385   727 _g_WRPRIM	=	0xf385
                         0000F38C   728 _g_CLPRIM	=	0xf38c
                         0000F39A   729 _g_USRTAB	=	0xf39a
                         0000F3DE   730 _g_CNSDFG	=	0xf3de
                         0000F3DF   731 _g_RG0SAV	=	0xf3df
                         0000F3E0   732 _g_RG1SAV	=	0xf3e0
                         0000F3E1   733 _g_RG2SAV	=	0xf3e1
                         0000F3E2   734 _g_RG3SAV	=	0xf3e2
                         0000F3E3   735 _g_RG4SAV	=	0xf3e3
                         0000F3E4   736 _g_RG5SAV	=	0xf3e4
                         0000F3E5   737 _g_RG6SAV	=	0xf3e5
                         0000F3E6   738 _g_RG7SAV	=	0xf3e6
                         0000F3E7   739 _g_STATFL	=	0xf3e7
                         0000F3E8   740 _g_TRGFLG	=	0xf3e8
                         0000F3EC   741 _g_MAXUPD	=	0xf3ec
                         0000F3EF   742 _g_MINUPD	=	0xf3ef
                         0000F3F3   743 _g_QUEUES	=	0xf3f3
                         0000F3F5   744 _g_FRCNEW	=	0xf3f5
                         0000F3F6   745 _g_SCNCNT	=	0xf3f6
                         0000F3F7   746 _g_REPCNT	=	0xf3f7
                         0000F3F8   747 _g_PUTPNT	=	0xf3f8
                         0000F3FA   748 _g_GETPNT	=	0xf3fa
                         0000F3FC   749 _g_CS120	=	0xf3fc
                         0000F401   750 _g_CS240	=	0xf401
                         0000F406   751 _g_LOW	=	0xf406
                         0000F408   752 _g_HIGH	=	0xf408
                         0000F40A   753 _g_HEADER	=	0xf40a
                         0000F40B   754 _g_ASPCT1	=	0xf40b
                         0000F40D   755 _g_ASPCT2	=	0xf40d
                         0000F959   756 _g_QUETAB	=	0xf959
                         0000F971   757 _g_QUEBAK	=	0xf971
                         0000F975   758 _g_VOICAQ	=	0xf975
                         0000F9F5   759 _g_VOICBQ	=	0xf9f5
                         0000FA75   760 _g_VOICCQ	=	0xfa75
                         0000FAF5   761 _g_RS2IQ	=	0xfaf5
                         0000FAF5   762 _g_DPPAGE	=	0xfaf5
                         0000FAF6   763 _g_ACPAGE	=	0xfaf6
                         0000FAF7   764 _g_AVCSAV	=	0xfaf7
                         0000FAF8   765 _g_EXBRSA	=	0xfaf8
                         0000FAF9   766 _g_CHRCNT	=	0xfaf9
                         0000FAFA   767 _g_ROMA	=	0xfafa
                         0000FAFC   768 _g_MODE	=	0xfafc
                         0000FAFD   769 _g_NORUSE	=	0xfafd
                         0000FAFE   770 _g_XSAVE	=	0xfafe
                         0000FB00   771 _g_YSAVE	=	0xfb00
                         0000FB03   772 _g_RSTMP	=	0xfb03
                         0000FB03   773 _g_TOCNT	=	0xfb03
                         0000FB04   774 _g_RSFCB	=	0xfb04
                         0000FB06   775 _g_RSIQLN	=	0xfb06
                         0000FB07   776 _g_MEXBIh	=	0xfb07
                         0000FB0C   777 _g_OLDSTT	=	0xfb0c
                         0000FB0C   778 _g_OLDINT	=	0xfb0c
                         0000FB16   779 _g_DEVNUM	=	0xfb16
                         0000FB17   780 _g_DATCNT	=	0xfb17
                         0000FB1A   781 _g_ERRORS	=	0xfb1a
                         0000FB1B   782 _g_FLAGS	=	0xfb1b
                         0000FB1C   783 _g_ESTBLS	=	0xfb1c
                         0000FB1D   784 _g_COMMSK	=	0xfb1d
                         0000FB1E   785 _g_LSTCOM	=	0xfb1e
                         0000FB1F   786 _g_LSTMOD	=	0xfb1f
                         0000FB35   787 _g_PRSCNT	=	0xfb35
                         0000FB36   788 _g_SAVSP	=	0xfb36
                         0000FB38   789 _g_VOICEN	=	0xfb38
                         0000FB39   790 _g_SAVVOL	=	0xfb39
                         0000FB3B   791 _g_MCLLEN	=	0xfb3b
                         0000FB3C   792 _g_MCLPTR	=	0xfb3c
                         0000FB3E   793 _g_QUEUEN	=	0xfb3e
                         0000FB3F   794 _g_MUSICF	=	0xfb3f
                         0000FB40   795 _g_PLYCNT	=	0xfb40
                         0000FB41   796 _g_VCBA	=	0xfb41
                         0000FB66   797 _g_VCBB	=	0xfb66
                         0000FB8B   798 _g_VCBC	=	0xfb8b
                         0000FBB0   799 _g_ENSTOP	=	0xfbb0
                         0000FBB1   800 _g_BASROM	=	0xfbb1
                         0000FBB2   801 _g_LINTTB	=	0xfbb2
                         0000FBCA   802 _g_FSTPOS	=	0xfbca
                         0000FBCC   803 _g_CODSAV	=	0xfbcc
                         0000FBCD   804 _g_FNKSWI	=	0xfbcd
                         0000FBCE   805 _g_FNKFLG	=	0xfbce
                         0000FBD8   806 _g_ONGSBF	=	0xfbd8
                         0000FBD9   807 _g_CLIKFL	=	0xfbd9
                         0000FBDA   808 _g_OLDKEY	=	0xfbda
                         0000FBE5   809 _g_NEWKEY	=	0xfbe5
                         0000FBF0   810 _g_KEYBUF	=	0xfbf0
                         0000FC18   811 _g_LINWRK	=	0xfc18
                         0000FC40   812 _g_PATWRK	=	0xfc40
                         0000FC48   813 _g_BOTTOM	=	0xfc48
                         0000FC4A   814 _g_HIMEM	=	0xfc4a
                         0000FC4C   815 _g_TRPTBL	=	0xfc4c
                         0000FC9A   816 _g_RTYCNT	=	0xfc9a
                         0000FC9B   817 _g_INTFLG	=	0xfc9b
                         0000FC9C   818 _g_PADY	=	0xfc9c
                         0000FC9D   819 _g_PADX	=	0xfc9d
                         0000FC9E   820 _g_JIFFY	=	0xfc9e
                         0000FCA0   821 _g_INTVAL	=	0xfca0
                         0000FCA2   822 _g_INTCNT	=	0xfca2
                         0000FCA4   823 _g_LOWLIM	=	0xfca4
                         0000FCA5   824 _g_WINWID	=	0xfca5
                         0000FCA6   825 _g_GRPHED	=	0xfca6
                         0000FCA7   826 _g_ESCCNT	=	0xfca7
                         0000FCA8   827 _g_INSFLG	=	0xfca8
                         0000FCA9   828 _g_CSRSW	=	0xfca9
                         0000FCAA   829 _g_CSTYLE	=	0xfcaa
                         0000FCAB   830 _g_CAPST	=	0xfcab
                         0000FCAC   831 _g_KANAST	=	0xfcac
                         0000FCAD   832 _g_KANAMD	=	0xfcad
                         0000FCAE   833 _g_FLBMEM	=	0xfcae
                         0000FCAF   834 _g_SCRMOD	=	0xfcaf
                         0000FCB0   835 _g_OLDSCR	=	0xfcb0
                         0000FCB1   836 _g_CASPRV	=	0xfcb1
                         0000FCB2   837 _g_BRDATR	=	0xfcb2
                         0000FCB3   838 _g_GXPOS	=	0xfcb3
                         0000FCB5   839 _g_GYPOS	=	0xfcb5
                         0000FCBB   840 _g_DRWFLG	=	0xfcbb
                         0000FCBC   841 _g_DRWSCL	=	0xfcbc
                         0000FCBD   842 _g_DRWANG	=	0xfcbd
                         0000FCC1   843 _g_MNROM	=	0xfcc1
                         0000FCC1   844 _g_EXPTBL	=	0xfcc1
                         0000FCC5   845 _g_SLTTBL	=	0xfcc5
                         0000FCC9   846 _g_SLTATR	=	0xfcc9
                         0000FD09   847 _g_SLTWRK	=	0xfd09
                         0000FD89   848 _g_PROCNM	=	0xfd89
                         0000FFE7   849 _g_RG08SAV	=	0xffe7
                         0000FFE8   850 _g_RG09SAV	=	0xffe8
                         0000FFE9   851 _g_RG10SAV	=	0xffe9
                         0000FFEA   852 _g_RG11SAV	=	0xffea
                         0000FFEB   853 _g_RG12SAV	=	0xffeb
                         0000FFEC   854 _g_RG13SAV	=	0xffec
                         0000FFED   855 _g_RG14SAV	=	0xffed
                         0000FFEE   856 _g_RG15SAV	=	0xffee
                         0000FFEF   857 _g_RG16SAV	=	0xffef
                         0000FFF0   858 _g_RG17SAV	=	0xfff0
                         0000FFF1   859 _g_RG18SAV	=	0xfff1
                         0000FFF2   860 _g_RG19SAV	=	0xfff2
                         0000FFF3   861 _g_RG20SAV	=	0xfff3
                         0000FFF4   862 _g_RG21SAV	=	0xfff4
                         0000FFF5   863 _g_RG22SAV	=	0xfff5
                         0000FFF6   864 _g_RG23SAV	=	0xfff6
                         0000FFF7   865 _g_MINROM	=	0xfff7
                         0000FFF8   866 _g_SVFFF8	=	0xfff8
                         0000FFFA   867 _g_RG25SAV	=	0xfffa
                         0000FFFB   868 _g_RG26SAV	=	0xfffb
                         0000FFFC   869 _g_RG27SAV	=	0xfffc
                         0000FFFD   870 _g_SVFFFD	=	0xfffd
                         00000004   871 _g_CGTABL	=	0x0004
                         00000006   872 _g_VDP_DR	=	0x0006
                         00000007   873 _g_VDP_DW	=	0x0007
                         0000002B   874 _g_BASRVN	=	0x002b
                         0000002B   875 _g_ROMVersion	=	0x002b
                         0000002D   876 _g_MSXVER	=	0x002d
                         0000002E   877 _g_MSXMID	=	0x002e
                         00000034   878 _g_CHAR_16	=	0x0034
                         00000000   879 _g_SUBRID	=	0x0000
                         00000002   880 _g_STRSRC	=	0x0002
                         0000F30F   881 _g_KANJTABLE	=	0xf30f
                         0000F323   882 _g_DISKVE	=	0xf323
                         0000F325   883 _g_BREAKV	=	0xf325
                         0000F341   884 _g_RAMAD0	=	0xf341
                         0000F342   885 _g_RAMAD1	=	0xf342
                         0000F343   886 _g_RAMAD2	=	0xf343
                         0000F344   887 _g_RAMAD3	=	0xf344
                         0000F348   888 _g_MASTER	=	0xf348
                         0000F37D   889 _g_BDOS	=	0xf37d
    000001ED                        890 ___str_0:
    000001ED 0A                     891 	.db 0x0a
    000001EE 0D                     892 	.db 0x0d
    000001EF 24                     893 	.ascii "$"
    000001F0 00                     894 	.db 0x00
                                    895 	.area _CODE
                                    896 	.area _INITIALIZER
                                    897 	.area _CABS (ABS)
